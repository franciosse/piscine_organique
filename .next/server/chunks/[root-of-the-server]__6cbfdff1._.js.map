{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  serial,\n  varchar,\n  text,\n  timestamp,\n  integer,\n  boolean,\n} from 'drizzle-orm/pg-core';\nimport { relations } from 'drizzle-orm';\n\nexport const users = pgTable('users', {\n  id: serial('id').primaryKey(),\n  name: varchar('name', { length: 100 }),\n  email: varchar('email', { length: 255 }).notNull().unique(),\n  passwordHash: text('password_hash').notNull(),\n  role: varchar('role', { length: 20 }).notNull().default('member'),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n  updatedAt: timestamp('updated_at').notNull().defaultNow(),\n  deletedAt: timestamp('deleted_at'),\n  isVerified: boolean('is_verified').default(false),\n});\n\nexport const teams = pgTable('teams', {\n  id: serial('id').primaryKey(),\n  name: varchar('name', { length: 100 }).notNull(),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n  updatedAt: timestamp('updated_at').notNull().defaultNow(),\n  stripeCustomerId: text('stripe_customer_id').unique(),\n  stripeSubscriptionId: text('stripe_subscription_id').unique(),\n  stripeProductId: text('stripe_product_id'),\n  planName: varchar('plan_name', { length: 50 }),\n  subscriptionStatus: varchar('subscription_status', { length: 20 }),\n});\n\nexport const teamMembers = pgTable('team_members', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id')\n    .notNull()\n    .references(() => users.id),\n  teamId: integer('team_id')\n    .notNull()\n    .references(() => teams.id),\n  role: varchar('role', { length: 50 }).notNull(),\n  joinedAt: timestamp('joined_at').notNull().defaultNow(),\n});\n\nexport const activityLogs = pgTable('activity_logs', {\n  id: serial('id').primaryKey(),\n  teamId: integer('team_id')\n    .notNull()\n    .references(() => teams.id),\n  userId: integer('user_id').references(() => users.id),\n  action: text('action').notNull(),\n  timestamp: timestamp('timestamp').notNull().defaultNow(),\n  ipAddress: varchar('ip_address', { length: 45 }),\n});\n\nexport const invitations = pgTable('invitations', {\n  id: serial('id').primaryKey(),\n  teamId: integer('team_id')\n    .notNull()\n    .references(() => teams.id),\n  email: varchar('email', { length: 255 }).notNull(),\n  role: varchar('role', { length: 50 }).notNull(),\n  invitedBy: integer('invited_by')\n    .notNull()\n    .references(() => users.id),\n  invitedAt: timestamp('invited_at').notNull().defaultNow(),\n  status: varchar('status', { length: 20 }).notNull().default('pending'),\n});\n\n// LMS ENTITIES\n\nexport const courses = pgTable('courses', {\n  id: serial('id').primaryKey(),\n  title: varchar('title', { length: 255 }).notNull(),\n  slug: varchar('slug', { length: 255 }).notNull().unique(),\n  description: text('description'),\n  price: integer('price').notNull().default(0), // en centimes\n  published: timestamp('published_at'),\n  imageUrl: varchar('image_url', { length: 2048 }),\n  authorId: integer('author_id').references(() => users.id),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n  updatedAt: timestamp('updated_at').notNull().defaultNow(),\n});\n\nexport const lessons = pgTable('lessons', {\n  id: serial('id').primaryKey(),\n  courseId: integer('course_id')\n    .notNull()\n    .references(() => courses.id),\n  title: varchar('title', { length: 255 }).notNull(),\n  slug: varchar('slug', { length: 255 }).notNull(),\n  content: text('content'), // HTML / Markdown / RichText\n  videoUrl: varchar('video_url', { length: 2048 }),\n  order: integer('order').notNull().default(0),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n});\n\nexport const enrollments = pgTable('enrollments', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  courseId: integer('course_id').notNull().references(() => courses.id),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n});\n\nexport const progress = pgTable('progress', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  lessonId: integer('lesson_id').notNull().references(() => lessons.id),\n  completed: timestamp('completed_at'),\n});\nexport const quizzes = pgTable('quizzes', {\n  id: serial('id').primaryKey(),\n  lessonId: integer('lesson_id').references(() => lessons.id),\n  title: varchar('title', { length: 255 }).notNull(),\n});\n\nexport const questions = pgTable('questions', {\n  id: serial('id').primaryKey(),\n  quizId: integer('quiz_id').notNull().references(() => quizzes.id),\n  text: text('text').notNull(),\n});\n\nexport const answers = pgTable('answers', {\n  id: serial('id').primaryKey(),\n  questionId: integer('question_id').notNull().references(() => questions.id),\n  text: text('text').notNull(),\n  isCorrect: integer('is_correct').notNull().default(0),\n});\n\nexport const teamsRelations = relations(teams, ({ many }) => ({\n  teamMembers: many(teamMembers),\n  activityLogs: many(activityLogs),\n  invitations: many(invitations),\n}));\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  teamMembers: many(teamMembers),\n  invitationsSent: many(invitations),\n}));\n\nexport const invitationsRelations = relations(invitations, ({ one }) => ({\n  team: one(teams, {\n    fields: [invitations.teamId],\n    references: [teams.id],\n  }),\n  invitedBy: one(users, {\n    fields: [invitations.invitedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const teamMembersRelations = relations(teamMembers, ({ one }) => ({\n  user: one(users, {\n    fields: [teamMembers.userId],\n    references: [users.id],\n  }),\n  team: one(teams, {\n    fields: [teamMembers.teamId],\n    references: [teams.id],\n  }),\n}));\n\nexport const activityLogsRelations = relations(activityLogs, ({ one }) => ({\n  team: one(teams, {\n    fields: [activityLogs.teamId],\n    references: [teams.id],\n  }),\n  user: one(users, {\n    fields: [activityLogs.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const coursesRelations = relations(courses, ({ one, many }) => ({\n  author: one(users, {\n    fields: [courses.authorId],\n    references: [users.id],\n  }),\n  lessons: many(lessons),\n  enrollments: many(enrollments),\n}));\n\nexport const lessonsRelations = relations(lessons, ({ one, many }) => ({\n  course: one(courses, {\n    fields: [lessons.courseId],\n    references: [courses.id],\n  }),\n  progress: many(progress),\n  quizzes: many(quizzes),\n}));\n\nexport const enrollmentsRelations = relations(enrollments, ({ one }) => ({\n  user: one(users, {\n    fields: [enrollments.userId],\n    references: [users.id],\n  }),\n  course: one(courses, {\n    fields: [enrollments.courseId],\n    references: [courses.id],\n  }),\n}));\n\nexport const progressRelations = relations(progress, ({ one }) => ({\n  user: one(users, {\n    fields: [progress.userId],\n    references: [users.id],\n  }),\n  lesson: one(lessons, {\n    fields: [progress.lessonId],\n    references: [lessons.id],\n  }),\n}));\n\nexport const quizzesRelations = relations(quizzes, ({ one, many }) => ({\n  lesson: one(lessons, {\n    fields: [quizzes.lessonId],\n    references: [lessons.id],\n  }),\n  questions: many(questions),\n}));\n\nexport const questionsRelations = relations(questions, ({ one, many }) => ({\n  quiz: one(quizzes, {\n    fields: [questions.quizId],\n    references: [quizzes.id],\n  }),\n  answers: many(answers),\n}));\n\nexport const answersRelations = relations(answers, ({ one }) => ({\n  question: one(questions, {\n    fields: [answers.questionId],\n    references: [questions.id],\n  }),\n}));\n\n\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type Team = typeof teams.$inferSelect;\nexport type NewTeam = typeof teams.$inferInsert;\nexport type TeamMember = typeof teamMembers.$inferSelect;\nexport type NewTeamMember = typeof teamMembers.$inferInsert;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\nexport type NewActivityLog = typeof activityLogs.$inferInsert;\nexport type Invitation = typeof invitations.$inferSelect;\nexport type NewInvitation = typeof invitations.$inferInsert;\nexport type TeamDataWithMembers = Team & {\n  teamMembers: (TeamMember & {\n    user: Pick<User, 'id' | 'name' | 'email'>;\n  })[];\n};\nexport type Course = typeof courses.$inferSelect;\nexport type NewCourse = typeof courses.$inferInsert;\n\nexport type Lesson = typeof lessons.$inferSelect;\nexport type NewLesson = typeof lessons.$inferInsert;\n\nexport type Enrollment = typeof enrollments.$inferSelect;\nexport type NewEnrollment = typeof enrollments.$inferInsert;\n\n\nexport enum ActivityType {\n  SIGN_UP = 'SIGN_UP',\n  SIGN_IN = 'SIGN_IN',\n  SIGN_OUT = 'SIGN_OUT',\n  UPDATE_PASSWORD = 'UPDATE_PASSWORD',\n  DELETE_ACCOUNT = 'DELETE_ACCOUNT',\n  UPDATE_ACCOUNT = 'UPDATE_ACCOUNT',\n  CREATE_TEAM = 'CREATE_TEAM',\n  REMOVE_TEAM_MEMBER = 'REMOVE_TEAM_MEMBER',\n  INVITE_TEAM_MEMBER = 'INVITE_TEAM_MEMBER',\n  ACCEPT_INVITATION = 'ACCEPT_INVITATION',\n}\n\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 455, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/db/drizzle.ts"],"sourcesContent":["import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from './schema';\n\n// Supprime la ligne suivante :\n// import dotenv from 'dotenv';\n// dotenv.config();\n\nif (!process.env.POSTGRES_URL) {\n  throw new Error('POSTGRES_URL environment variable is not set');\n}\n\nexport const client = postgres(process.env.POSTGRES_URL);\nexport const db = drizzle(client, { schema });\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,+BAA+B;AAC/B,+BAA+B;AAC/B,mBAAmB;AAEnB,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;IAC7B,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,SAAS,CAAA,GAAA,0IAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY;AAChD,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 479, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/auth/jwtKey.ts"],"sourcesContent":["// /lib/auth/jwtKey.ts\nexport const jwtKey = new TextEncoder().encode(process.env.AUTH_SECRET);\n\nif (!process.env.AUTH_SECRET) {\n  throw new Error('❌ AUTH_SECRET manquant dans .env');\n}"],"names":[],"mappings":"AAAA,sBAAsB;;;;AACf,MAAM,SAAS,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,WAAW;AAEtE,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB","debugId":null}},
    {"offset": {"line": 491, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/auth/passwordReset.ts"],"sourcesContent":["import { SignJWT, jwtVerify } from 'jose';\nimport { jwtKey } from './jwtKey';\n\nexport async function generatePasswordResetToken(userId: number) {\n  return await new SignJWT({ userId, type: 'password-reset' })\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime('1h')\n    .sign(jwtKey);\n}\n\nexport async function verifyPasswordResetToken(token: string) {\n  const { payload } = await jwtVerify(token, jwtKey, { algorithms: ['HS256'] });\n  if (payload.type !== 'password-reset') throw new Error('Type de token invalide');\n  return payload.userId as number;\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEO,eAAe,2BAA2B,MAAc;IAC7D,OAAO,MAAM,IAAI,uJAAA,CAAA,UAAO,CAAC;QAAE;QAAQ,MAAM;IAAiB,GACvD,kBAAkB,CAAC;QAAE,KAAK;IAAQ,GAClC,WAAW,GACX,iBAAiB,CAAC,MAClB,IAAI,CAAC,uHAAA,CAAA,SAAM;AAChB;AAEO,eAAe,yBAAyB,KAAa;IAC1D,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,yJAAA,CAAA,YAAS,AAAD,EAAE,OAAO,uHAAA,CAAA,SAAM,EAAE;QAAE,YAAY;YAAC;SAAQ;IAAC;IAC3E,IAAI,QAAQ,IAAI,KAAK,kBAAkB,MAAM,IAAI,MAAM;IACvD,OAAO,QAAQ,MAAM;AACvB","debugId":null}},
    {"offset": {"line": 593, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/email/emailService.ts"],"sourcesContent":["// /lib/email.ts\nimport nodemailer from 'nodemailer';\n\nconst transporter = nodemailer.createTransport({\n  host: process.env.SMTP_HOST,\n  port: Number(process.env.SMTP_PORT),\n  secure: false,\n  auth: {\n    user: process.env.SMTP_USER,\n    pass: process.env.SMTP_PASS,\n  },\n});\n\nexport async function sendVerificationEmail(email: string, token: string) {\n  const verifyUrl = `${process.env.BASE_URL}/verify-email?token=${token}`;\n  await transporter.sendMail({\n    from: '\"Piscine Organique\" <noreply@piscineorganique.com>',\n    to: email,\n    subject: 'Vérifie ton adresse email',\n    html: `<p>Merci de t'être inscrit ! Clique sur le lien pour vérifier ton adresse email :</p>\n           <a href=\"${verifyUrl}\">${verifyUrl}</a>`,\n  });\n}\n\nexport async function sendPasswordResetEmail(email: string, token: string) {\n  const resetUrl = `${process.env.BASE_URL}/reset-password?token=${token}`;\n  await transporter.sendMail({\n    from: '\"Piscine Organique\" <noreply@piscineorganique.com>',\n    to: email,\n    subject: 'Réinitialisation du mot de passe',\n    html: `<p>Clique sur le lien pour réinitialiser ton mot de passe :</p>\n           <a href=\"${resetUrl}\">${resetUrl}</a>`,\n  });\n}\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;;AAChB;;AAEA,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;IAC7C,MAAM,QAAQ,GAAG,CAAC,SAAS;IAC3B,MAAM,OAAO,QAAQ,GAAG,CAAC,SAAS;IAClC,QAAQ;IACR,MAAM;QACJ,MAAM,QAAQ,GAAG,CAAC,SAAS;QAC3B,MAAM,QAAQ,GAAG,CAAC,SAAS;IAC7B;AACF;AAEO,eAAe,sBAAsB,KAAa,EAAE,KAAa;IACtE,MAAM,YAAY,GAAG,QAAQ,GAAG,CAAC,QAAQ,CAAC,oBAAoB,EAAE,OAAO;IACvE,MAAM,YAAY,QAAQ,CAAC;QACzB,MAAM;QACN,IAAI;QACJ,SAAS;QACT,MAAM,CAAC;oBACS,EAAE,UAAU,EAAE,EAAE,UAAU,IAAI,CAAC;IACjD;AACF;AAEO,eAAe,uBAAuB,KAAa,EAAE,KAAa;IACvE,MAAM,WAAW,GAAG,QAAQ,GAAG,CAAC,QAAQ,CAAC,sBAAsB,EAAE,OAAO;IACxE,MAAM,YAAY,QAAQ,CAAC;QACzB,MAAM;QACN,IAAI;QACJ,SAAS;QACT,MAAM,CAAC;oBACS,EAAE,SAAS,EAAE,EAAE,SAAS,IAAI,CAAC;IAC/C;AACF","debugId":null}},
    {"offset": {"line": 633, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/app/api/password-reset-request/route.ts"],"sourcesContent":["// /app/api/password-reset-request/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { db } from '@/lib/db/drizzle';\nimport { users } from '@/lib/db/schema';\nimport { z } from 'zod';\nimport { eq } from 'drizzle-orm';\nimport { generatePasswordResetToken } from '@/lib/auth/passwordReset';\nimport { sendPasswordResetEmail } from '@/lib/email/emailService';\n\nconst passwordResetRequestSchema = z.object({\n  email: z.string().email(),\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const json = await request.json();\n    const data = passwordResetRequestSchema.parse(json);\n\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.email, data.email))\n      .limit(1);\n\n    if (!user) {\n      // Ne pas divulguer que l'email n'existe pas\n      return NextResponse.json({ success: 'If your email exists, you will receive a reset link.' });\n    }\n\n    const token = await generatePasswordResetToken(user.id);\n    await sendPasswordResetEmail(user.email, token);\n\n    return NextResponse.json({ success: 'If your email exists, you will receive a reset link.' });\n  } catch (error: any) {\n    return NextResponse.json({ error: error.message || 'Invalid input' }, { status: 400 });\n  }\n}\n"],"names":[],"mappings":"AAAA,2CAA2C;;;;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAEA,MAAM,6BAA6B,oKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,OAAO,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK;AACzB;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,OAAO,2BAA2B,KAAK,CAAC;QAE9C,MAAM,CAAC,KAAK,GAAG,MAAM,sHAAA,CAAA,KAAE,CACpB,MAAM,GACN,IAAI,CAAC,qHAAA,CAAA,QAAK,EACV,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,qHAAA,CAAA,QAAK,CAAC,KAAK,EAAE,KAAK,KAAK,GAChC,KAAK,CAAC;QAET,IAAI,CAAC,MAAM;YACT,4CAA4C;YAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAuD;QAC7F;QAEA,MAAM,QAAQ,MAAM,CAAA,GAAA,8HAAA,CAAA,6BAA0B,AAAD,EAAE,KAAK,EAAE;QACtD,MAAM,CAAA,GAAA,8HAAA,CAAA,yBAAsB,AAAD,EAAE,KAAK,KAAK,EAAE;QAEzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAuD;IAC7F,EAAE,OAAO,OAAY;QACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO,IAAI;QAAgB,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF","debugId":null}}]
}