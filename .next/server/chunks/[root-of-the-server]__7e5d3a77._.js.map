{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  serial,\n  varchar,\n  text,\n  timestamp,\n  integer,\n  boolean,\n  decimal,\n  unique,\n} from 'drizzle-orm/pg-core';\nimport { relations } from 'drizzle-orm';\n\n// Tables existantes (avec quelques modifications)\nexport const users = pgTable('users', {\n  id: serial('id').primaryKey(),\n  name: varchar('name', { length: 100 }),\n  email: varchar('email', { length: 255 }).notNull().unique(),\n  passwordHash: text('password_hash').notNull(),\n  role: varchar('role', { length: 20 }).notNull().default('student'), // Changé de 'member' à 'student'\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n  updatedAt: timestamp('updated_at').notNull().defaultNow(),\n  deletedAt: timestamp('deleted_at'),\n  isVerified: boolean('is_verified').default(false),\n});\n\nexport const teams = pgTable('teams', {\n  id: serial('id').primaryKey(),\n  name: varchar('name', { length: 100 }).notNull(),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n  updatedAt: timestamp('updated_at').notNull().defaultNow(),\n  stripeCustomerId: text('stripe_customer_id').unique(),\n  stripeSubscriptionId: text('stripe_subscription_id').unique(),\n  stripeProductId: text('stripe_product_id'),\n  planName: varchar('plan_name', { length: 50 }),\n  subscriptionStatus: varchar('subscription_status', { length: 20 }),\n});\n\nexport const teamMembers = pgTable('team_members', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id')\n    .notNull()\n    .references(() => users.id),\n  teamId: integer('team_id')\n    .notNull()\n    .references(() => teams.id),\n  role: varchar('role', { length: 50 }).notNull(),\n  joinedAt: timestamp('joined_at').notNull().defaultNow(),\n});\n\nexport const activityLogs = pgTable('activity_logs', {\n  id: serial('id').primaryKey(),\n  teamId: integer('team_id')\n    .notNull()\n    .references(() => teams.id),\n  userId: integer('user_id').references(() => users.id),\n  action: text('action').notNull(),\n  timestamp: timestamp('timestamp').notNull().defaultNow(),\n  ipAddress: varchar('ip_address', { length: 45 }),\n});\n\nexport const invitations = pgTable('invitations', {\n  id: serial('id').primaryKey(),\n  teamId: integer('team_id')\n    .notNull()\n    .references(() => teams.id),\n  email: varchar('email', { length: 255 }).notNull(),\n  role: varchar('role', { length: 50 }).notNull(),\n  invitedBy: integer('invited_by')\n    .notNull()\n    .references(() => users.id),\n  invitedAt: timestamp('invited_at').notNull().defaultNow(),\n  status: varchar('status', { length: 20 }).notNull().default('pending'),\n});\n\n// LMS ENTITIES - Tables mises à jour et enrichies\n\nexport const courses = pgTable('courses', {\n  id: serial('id').primaryKey(),\n  title: varchar('title', { length: 255 }).notNull(),\n  slug: varchar('slug', { length: 255 }).notNull().unique(),\n  description: text('description'),\n  price: integer('price').notNull().default(0), // en centimes\n  stripePriceId: varchar('stripe_price_id', { length: 255 }), // ID du prix Stripe\n  published: timestamp('published_at'),\n  imageUrl: varchar('image_url', { length: 2048 }),\n  difficultyLevel: varchar('difficulty_level', { length: 20 }).default('beginner'), // beginner, intermediate, advanced\n  estimatedDuration: integer('estimated_duration'), // durée estimée en minutes\n  authorId: integer('author_id').references(() => users.id),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n  updatedAt: timestamp('updated_at').notNull().defaultNow(),\n});\n\n// Nouvelle table pour les chapitres de cours\nexport const courseChapters = pgTable('course_chapters', {\n  id: serial('id').primaryKey(),\n  courseId: integer('course_id')\n    .notNull()\n    .references(() => courses.id, { onDelete: 'cascade' }),\n  title: varchar('title', { length: 255 }).notNull(),\n  description: text('description'),\n  position: integer('position').notNull(),\n  published: timestamp('published_at'),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n  updatedAt: timestamp('updated_at').notNull().defaultNow(),\n}, (table) => ({\n  uniqueCoursePosition: unique().on(table.courseId, table.position),\n}));\n\n// Table lessons mise à jour\nexport const lessons = pgTable('lessons', {\n  id: serial('id').primaryKey(),\n  chapterId: integer('chapter_id')\n    .notNull()\n    .references(() => courseChapters.id, { onDelete: 'cascade' }),\n  title: varchar('title', { length: 255 }).notNull(),\n  slug: varchar('slug', { length: 255 }).notNull(),\n  content: text('content'), // HTML / Markdown / RichText\n  videoUrl: varchar('video_url', { length: 2048 }),\n  position: integer('position').notNull().default(0),\n  duration: integer('duration'), // durée en secondes\n  published: timestamp('published_at'),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n  updatedAt: timestamp('updated_at').notNull().defaultNow(),\n}, (table) => ({\n  uniqueChapterPosition: unique().on(table.chapterId, table.position),\n}));\n\n// Nouvelle table pour les ressources attachées aux leçons\nexport const lessonAttachments = pgTable('lesson_attachments', {\n  id: serial('id').primaryKey(),\n  lessonId: integer('lesson_id')\n    .notNull()\n    .references(() => lessons.id, { onDelete: 'cascade' }),\n  filename: varchar('filename', { length: 255 }).notNull(),\n  fileUrl: varchar('file_url', { length: 500 }).notNull(),\n  fileType: varchar('file_type', { length: 50 }).notNull(),\n  fileSize: integer('file_size'),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n});\n\n// Table enrollments renommée en coursePurchases avec plus d'infos\nexport const coursePurchases = pgTable('course_purchases', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  courseId: integer('course_id').notNull().references(() => courses.id),\n  stripePaymentIntentId: varchar('stripe_payment_intent_id', { length: 255 }),\n  amount: integer('amount').notNull(), // en centimes\n  currency: varchar('currency', { length: 3 }).default('EUR'),\n  purchasedAt: timestamp('purchased_at').notNull().defaultNow(),\n}, (table) => ({\n  uniqueUserCourse: unique().on(table.userId, table.courseId),\n}));\n\n// Table progress mise à jour\nexport const studentProgress = pgTable('student_progress', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  courseId: integer('course_id').notNull().references(() => courses.id),\n  lessonId: integer('lesson_id').notNull().references(() => lessons.id),\n  completed: boolean('completed').default(false),\n  completedAt: timestamp('completed_at'),\n  watchTime: integer('watch_time').default(0), // temps de visionnage en secondes\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n  updatedAt: timestamp('updated_at').notNull().defaultNow(),\n}, (table) => ({\n  uniqueUserLesson: unique().on(table.userId, table.lessonId),\n}));\n\n// Table quizzes mise à jour\nexport const quizzes = pgTable('quizzes', {\n  id: serial('id').primaryKey(),\n  lessonId: integer('lesson_id').references(() => lessons.id, { onDelete: 'cascade' }),\n  title: varchar('title', { length: 255 }).notNull(),\n  description: text('description'),\n  passingScore: integer('passing_score').default(70), // score minimum pour réussir (en %)\n  maxAttempts: integer('max_attempts').default(3),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n});\n\n// Table questions mise à jour\nexport const quizQuestions = pgTable('quiz_questions', {\n  id: serial('id').primaryKey(),\n  quizId: integer('quiz_id').notNull().references(() => quizzes.id, { onDelete: 'cascade' }),\n  question: text('question').notNull(),\n  questionType: varchar('question_type', { length: 20 }).default('multiple_choice'), // multiple_choice, true_false, open_ended\n  points: integer('points').default(1),\n  position: integer('position').notNull(),\n  explanation: text('explanation'), // explication de la réponse correcte\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n});\n\n// Table answers mise à jour\nexport const quizAnswers = pgTable('quiz_answers', {\n  id: serial('id').primaryKey(),\n  questionId: integer('question_id').notNull().references(() => quizQuestions.id, { onDelete: 'cascade' }),\n  answerText: text('answer_text').notNull(),\n  isCorrect: boolean('is_correct').default(false),\n  position: integer('position').notNull(),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n});\n\n// Nouvelles tables pour les tentatives de quiz\nexport const quizAttempts = pgTable('quiz_attempts', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  quizId: integer('quiz_id').notNull().references(() => quizzes.id),\n  score: integer('score').notNull(), // score obtenu en pourcentage\n  passed: boolean('passed').default(false),\n  attemptNumber: integer('attempt_number').notNull(),\n  startedAt: timestamp('started_at').notNull().defaultNow(),\n  completedAt: timestamp('completed_at'),\n}, (table) => ({\n  uniqueUserQuizAttempt: unique().on(table.userId, table.quizId, table.attemptNumber),\n}));\n\nexport const quizAttemptAnswers = pgTable('quiz_attempt_answers', {\n  id: serial('id').primaryKey(),\n  attemptId: integer('attempt_id').notNull().references(() => quizAttempts.id, { onDelete: 'cascade' }),\n  questionId: integer('question_id').notNull().references(() => quizQuestions.id),\n  selectedAnswerId: integer('selected_answer_id').references(() => quizAnswers.id),\n  openAnswer: text('open_answer'), // pour les questions ouvertes\n  isCorrect: boolean('is_correct').default(false),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n});\n\n// RELATIONS\nexport const teamsRelations = relations(teams, ({ many }) => ({\n  teamMembers: many(teamMembers),\n  activityLogs: many(activityLogs),\n  invitations: many(invitations),\n}));\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  teamMembers: many(teamMembers),\n  invitationsSent: many(invitations),\n  coursesCreated: many(courses),\n  coursePurchases: many(coursePurchases),\n  studentProgress: many(studentProgress),\n  quizAttempts: many(quizAttempts),\n}));\n\nexport const invitationsRelations = relations(invitations, ({ one }) => ({\n  team: one(teams, {\n    fields: [invitations.teamId],\n    references: [teams.id],\n  }),\n  invitedBy: one(users, {\n    fields: [invitations.invitedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const teamMembersRelations = relations(teamMembers, ({ one }) => ({\n  user: one(users, {\n    fields: [teamMembers.userId],\n    references: [users.id],\n  }),\n  team: one(teams, {\n    fields: [teamMembers.teamId],\n    references: [teams.id],\n  }),\n}));\n\nexport const activityLogsRelations = relations(activityLogs, ({ one }) => ({\n  team: one(teams, {\n    fields: [activityLogs.teamId],\n    references: [teams.id],\n  }),\n  user: one(users, {\n    fields: [activityLogs.userId],\n    references: [users.id],\n  }),\n}));\n\n// Relations LMS\nexport const coursesRelations = relations(courses, ({ one, many }) => ({\n  author: one(users, {\n    fields: [courses.authorId],\n    references: [users.id],\n  }),\n  chapters: many(courseChapters),\n  purchases: many(coursePurchases),\n  studentProgress: many(studentProgress),\n}));\n\nexport const courseChaptersRelations = relations(courseChapters, ({ one, many }) => ({\n  course: one(courses, {\n    fields: [courseChapters.courseId],\n    references: [courses.id],\n  }),\n  lessons: many(lessons),\n}));\n\nexport const lessonsRelations = relations(lessons, ({ one, many }) => ({\n  chapter: one(courseChapters, {\n    fields: [lessons.chapterId],\n    references: [courseChapters.id],\n  }),\n  attachments: many(lessonAttachments),\n  quizzes: many(quizzes),\n  studentProgress: many(studentProgress),\n}));\n\nexport const lessonAttachmentsRelations = relations(lessonAttachments, ({ one }) => ({\n  lesson: one(lessons, {\n    fields: [lessonAttachments.lessonId],\n    references: [lessons.id],\n  }),\n}));\n\nexport const coursePurchasesRelations = relations(coursePurchases, ({ one }) => ({\n  user: one(users, {\n    fields: [coursePurchases.userId],\n    references: [users.id],\n  }),\n  course: one(courses, {\n    fields: [coursePurchases.courseId],\n    references: [courses.id],\n  }),\n}));\n\nexport const studentProgressRelations = relations(studentProgress, ({ one }) => ({\n  user: one(users, {\n    fields: [studentProgress.userId],\n    references: [users.id],\n  }),\n  course: one(courses, {\n    fields: [studentProgress.courseId],\n    references: [courses.id],\n  }),\n  lesson: one(lessons, {\n    fields: [studentProgress.lessonId],\n    references: [lessons.id],\n  }),\n}));\n\nexport const quizzesRelations = relations(quizzes, ({ one, many }) => ({\n  lesson: one(lessons, {\n    fields: [quizzes.lessonId],\n    references: [lessons.id],\n  }),\n  questions: many(quizQuestions),\n  attempts: many(quizAttempts),\n}));\n\nexport const quizQuestionsRelations = relations(quizQuestions, ({ one, many }) => ({\n  quiz: one(quizzes, {\n    fields: [quizQuestions.quizId],\n    references: [quizzes.id],\n  }),\n  answers: many(quizAnswers),\n  attemptAnswers: many(quizAttemptAnswers),\n}));\n\nexport const quizAnswersRelations = relations(quizAnswers, ({ one, many }) => ({\n  question: one(quizQuestions, {\n    fields: [quizAnswers.questionId],\n    references: [quizQuestions.id],\n  }),\n  attemptAnswers: many(quizAttemptAnswers),\n}));\n\nexport const quizAttemptsRelations = relations(quizAttempts, ({ one, many }) => ({\n  user: one(users, {\n    fields: [quizAttempts.userId],\n    references: [users.id],\n  }),\n  quiz: one(quizzes, {\n    fields: [quizAttempts.quizId],\n    references: [quizzes.id],\n  }),\n  answers: many(quizAttemptAnswers),\n}));\n\nexport const quizAttemptAnswersRelations = relations(quizAttemptAnswers, ({ one }) => ({\n  attempt: one(quizAttempts, {\n    fields: [quizAttemptAnswers.attemptId],\n    references: [quizAttempts.id],\n  }),\n  question: one(quizQuestions, {\n    fields: [quizAttemptAnswers.questionId],\n    references: [quizQuestions.id],\n  }),\n  selectedAnswer: one(quizAnswers, {\n    fields: [quizAttemptAnswers.selectedAnswerId],\n    references: [quizAnswers.id],\n  }),\n}));\n\n// TYPES\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type Team = typeof teams.$inferSelect;\nexport type NewTeam = typeof teams.$inferInsert;\nexport type TeamMember = typeof teamMembers.$inferSelect;\nexport type NewTeamMember = typeof teamMembers.$inferInsert;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\nexport type NewActivityLog = typeof activityLogs.$inferInsert;\nexport type Invitation = typeof invitations.$inferSelect;\nexport type NewInvitation = typeof invitations.$inferInsert;\n\n// Types LMS\nexport type Course = typeof courses.$inferSelect;\nexport type NewCourse = typeof courses.$inferInsert;\nexport type CourseChapter = typeof courseChapters.$inferSelect;\nexport type NewCourseChapter = typeof courseChapters.$inferInsert;\nexport type Lesson = typeof lessons.$inferSelect;\nexport type NewLesson = typeof lessons.$inferInsert;\nexport type LessonAttachment = typeof lessonAttachments.$inferSelect;\nexport type NewLessonAttachment = typeof lessonAttachments.$inferInsert;\nexport type CoursePurchase = typeof coursePurchases.$inferSelect;\nexport type NewCoursePurchase = typeof coursePurchases.$inferInsert;\nexport type StudentProgress = typeof studentProgress.$inferSelect;\nexport type NewStudentProgress = typeof studentProgress.$inferInsert;\nexport type Quiz = typeof quizzes.$inferSelect;\nexport type NewQuiz = typeof quizzes.$inferInsert;\nexport type QuizQuestion = typeof quizQuestions.$inferSelect;\nexport type NewQuizQuestion = typeof quizQuestions.$inferInsert;\nexport type QuizAnswer = typeof quizAnswers.$inferSelect;\nexport type NewQuizAnswer = typeof quizAnswers.$inferInsert;\nexport type QuizAttempt = typeof quizAttempts.$inferSelect;\nexport type NewQuizAttempt = typeof quizAttempts.$inferInsert;\nexport type QuizAttemptAnswer = typeof quizAttemptAnswers.$inferSelect;\nexport type NewQuizAttemptAnswer = typeof quizAttemptAnswers.$inferInsert;\n\n// Types composés\nexport type TeamDataWithMembers = Team & {\n  teamMembers: (TeamMember & {\n    user: Pick<User, 'id' | 'name' | 'email'>;\n  })[];\n};\n\nexport type CourseWithDetails = Course & {\n  author: Pick<User, 'id' | 'name' | 'email'>;\n  chapters: (CourseChapter & {\n    lessons: (Lesson & {\n      quizzes: Quiz[];\n      attachments: LessonAttachment[];\n    })[];\n  })[];\n  _count?: {\n    purchases: number;\n    lessons: number;\n  };\n};\n\nexport type LessonWithDetails = Lesson & {\n  chapter: CourseChapter & {\n    course: Course;\n  };\n  quizzes: (Quiz & {\n    questions: (QuizQuestion & {\n      answers: QuizAnswer[];\n    })[];\n  })[];\n  attachments: LessonAttachment[];\n  studentProgress?: StudentProgress;\n};\n\n// Enums\nexport enum ActivityType {\n  SIGN_UP = 'SIGN_UP',\n  SIGN_IN = 'SIGN_IN',\n  SIGN_OUT = 'SIGN_OUT',\n  UPDATE_PASSWORD = 'UPDATE_PASSWORD',\n  DELETE_ACCOUNT = 'DELETE_ACCOUNT',\n  UPDATE_ACCOUNT = 'UPDATE_ACCOUNT',\n  CREATE_TEAM = 'CREATE_TEAM',\n  REMOVE_TEAM_MEMBER = 'REMOVE_TEAM_MEMBER',\n  INVITE_TEAM_MEMBER = 'INVITE_TEAM_MEMBER',\n  ACCEPT_INVITATION = 'ACCEPT_INVITATION',\n  // Nouveaux types d'activité LMS\n  CREATE_COURSE = 'CREATE_COURSE',\n  PUBLISH_COURSE = 'PUBLISH_COURSE',\n  PURCHASE_COURSE = 'PURCHASE_COURSE',\n  COMPLETE_LESSON = 'COMPLETE_LESSON',\n  COMPLETE_QUIZ = 'COMPLETE_QUIZ',\n}\n\nexport enum UserRole {\n  STUDENT = 'student',\n  ADMIN = 'admin',\n}\n\nexport enum DifficultyLevel {\n  BEGINNER = 'beginner',\n  INTERMEDIATE = 'intermediate',\n  ADVANCED = 'advanced',\n}\n\nexport enum QuestionType {\n  MULTIPLE_CHOICE = 'multiple_choice',\n  TRUE_FALSE = 'true_false',\n  OPEN_ENDED = 'open_ended',\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 678, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/db/drizzle.ts"],"sourcesContent":["import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from './schema';\n\n// Supprime la ligne suivante :\n// import dotenv from 'dotenv';\n// dotenv.config();\n\nif (!process.env.POSTGRES_URL) {\n  throw new Error('POSTGRES_URL environment variable is not set');\n}\n\nexport const client = postgres(process.env.POSTGRES_URL);\nexport const db = drizzle(client, { schema });\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,+BAA+B;AAC/B,+BAA+B;AAC/B,mBAAmB;AAEnB,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;IAC7B,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,SAAS,CAAA,GAAA,0IAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY;AAChD,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 702, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/auth/session.ts"],"sourcesContent":["import { compare, hash } from 'bcryptjs';\nimport { SignJWT, jwtVerify } from 'jose';\nimport { cookies } from 'next/headers';\nimport { NewUser } from '@/lib/db/schema';\nimport { db } from '@/lib/db/drizzle';\nimport { users } from '@/lib/db/schema';\nimport { eq } from 'drizzle-orm';\n\nconst key = new TextEncoder().encode(process.env.AUTH_SECRET);\nconst SALT_ROUNDS = 10;\n\nexport async function hashPassword(password: string) {\n  return hash(password, SALT_ROUNDS);\n}\n\nexport async function comparePasswords(\n  plainTextPassword: string,\n  hashedPassword: string\n) {\n  return compare(plainTextPassword, hashedPassword);\n}\n\ntype SessionData = {\n  user: { id: number };\n  expires: string;\n};\n\nexport async function signToken(payload: SessionData) {\n  return await new SignJWT(payload)\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime('1 day from now')\n    .sign(key);\n}\n\nexport async function verifyToken(input: string) {\n  const { payload } = await jwtVerify(input, key, {\n    algorithms: ['HS256'],\n  });\n  return payload as SessionData;\n}\n\nexport async function getSession() {\n  const session = (await cookies()).get('session')?.value;\n  if (!session) return null;\n  return await verifyToken(session);\n}\n\nexport async function setSession(user: NewUser) {\n  const expiresInOneDay = new Date(Date.now() + 24 * 60 * 60 * 1000);\n  const session: SessionData = {\n    user: { id: user.id! },\n    expires: expiresInOneDay.toISOString(),\n  };\n  const encryptedSession = await signToken(session);\n  (await cookies()).set('session', encryptedSession, {\n    expires: expiresInOneDay,\n    httpOnly: true,\n    secure: true,\n    sameSite: 'lax',\n  });\n}\n\nexport async function getUser() {\n  const session = await getSession();\n  if (!session) return null;\n\n  const [user] = await db\n    .select()\n    .from(users)\n    .where(eq(users.id, session.user.id))\n    .limit(1);\n\n  return user ?? null;\n}\n"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;;;;;;;AAEA,MAAM,MAAM,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,WAAW;AAC5D,MAAM,cAAc;AAEb,eAAe,aAAa,QAAgB;IACjD,OAAO,CAAA,GAAA,mIAAA,CAAA,OAAI,AAAD,EAAE,UAAU;AACxB;AAEO,eAAe,iBACpB,iBAAyB,EACzB,cAAsB;IAEtB,OAAO,CAAA,GAAA,mIAAA,CAAA,UAAO,AAAD,EAAE,mBAAmB;AACpC;AAOO,eAAe,UAAU,OAAoB;IAClD,OAAO,MAAM,IAAI,uJAAA,CAAA,UAAO,CAAC,SACtB,kBAAkB,CAAC;QAAE,KAAK;IAAQ,GAClC,WAAW,GACX,iBAAiB,CAAC,kBAClB,IAAI,CAAC;AACV;AAEO,eAAe,YAAY,KAAa;IAC7C,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,yJAAA,CAAA,YAAS,AAAD,EAAE,OAAO,KAAK;QAC9C,YAAY;YAAC;SAAQ;IACvB;IACA,OAAO;AACT;AAEO,eAAe;IACpB,MAAM,UAAU,CAAC,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,GAAG,EAAE,GAAG,CAAC,YAAY;IAClD,IAAI,CAAC,SAAS,OAAO;IACrB,OAAO,MAAM,YAAY;AAC3B;AAEO,eAAe,WAAW,IAAa;IAC5C,MAAM,kBAAkB,IAAI,KAAK,KAAK,GAAG,KAAK,KAAK,KAAK,KAAK;IAC7D,MAAM,UAAuB;QAC3B,MAAM;YAAE,IAAI,KAAK,EAAE;QAAE;QACrB,SAAS,gBAAgB,WAAW;IACtC;IACA,MAAM,mBAAmB,MAAM,UAAU;IACzC,CAAC,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,GAAG,EAAE,GAAG,CAAC,WAAW,kBAAkB;QACjD,SAAS;QACT,UAAU;QACV,QAAQ;QACR,UAAU;IACZ;AACF;AAEO,eAAe;IACpB,MAAM,UAAU,MAAM;IACtB,IAAI,CAAC,SAAS,OAAO;IAErB,MAAM,CAAC,KAAK,GAAG,MAAM,sHAAA,CAAA,KAAE,CACpB,MAAM,GACN,IAAI,CAAC,qHAAA,CAAA,QAAK,EACV,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,qHAAA,CAAA,QAAK,CAAC,EAAE,EAAE,QAAQ,IAAI,CAAC,EAAE,GAClC,KAAK,CAAC;IAET,OAAO,QAAQ;AACjB","debugId":null}},
    {"offset": {"line": 776, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/auth/activity.ts"],"sourcesContent":["// /lib/auth/activity.ts (nouveau fichier)\nimport { db } from '@/lib/db/drizzle';\nimport { activityLogs, ActivityType } from '@/lib/db/schema';\n\nexport async function logActivity(\n  teamId: number | null | undefined,\n  userId: number,\n  type: ActivityType,\n  ipAddress?: string\n) {\n  if (!teamId) return;\n\n  await db.insert(activityLogs).values({\n    teamId,\n    userId,\n    action: type,\n    ipAddress: ipAddress || '',\n  });\n}\n\nexport { ActivityType };\n"],"names":[],"mappings":"AAAA,0CAA0C;;;;AAC1C;AACA;;;AAEO,eAAe,YACpB,MAAiC,EACjC,MAAc,EACd,IAAkB,EAClB,SAAkB;IAElB,IAAI,CAAC,QAAQ;IAEb,MAAM,sHAAA,CAAA,KAAE,CAAC,MAAM,CAAC,qHAAA,CAAA,eAAY,EAAE,MAAM,CAAC;QACnC;QACA;QACA,QAAQ;QACR,WAAW,aAAa;IAC1B;AACF","debugId":null}},
    {"offset": {"line": 806, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/app/api/signin/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { eq } from 'drizzle-orm';\nimport { db } from '@/lib/db/drizzle';\nimport { users } from '@/lib/db/schema';\nimport { comparePasswords, setSession } from '@/lib/auth/session';\nimport { logActivity, ActivityType } from '@/lib/auth/activity'; // adapte selon ta structure\nimport { getUser } from '@/lib/db/queries';\n\nconst signInSchema = z.object({\n  email: z.string().email().min(3).max(255),\n  password: z.string().min(8).max(100),\n  redirect: z.string().optional(),\n  priceId: z.string().optional(),\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const data = signInSchema.parse(body);\n\n    // Chercher user par email\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.email, data.email))\n      .limit(1);\n\n    if (!user) {\n      return NextResponse.json(\n        { error: 'Invalid email or password. Please try again.' },\n        { status: 400 }\n      );\n    }\n\n    // Vérifier password\n    const valid = await comparePasswords(data.password, user.passwordHash);\n    if (!valid) {\n      return NextResponse.json(\n        { error: 'Invalid email or password. Please try again.' },\n        { status: 400 }\n      );\n    }\n\n    // Enregistrer session (cookie)\n    await setSession(user);\n\n    // Log activité (tu adapteras la fonction selon ta structure)\n    await logActivity(null, user.id, ActivityType.SIGN_IN);\n\n    // Réponse OK + éventuellement url redirect (tu peux personnaliser)\n    return NextResponse.json({\n      success: true,\n      redirect: data.redirect || '/dashboard',\n      priceId: data.priceId || null,\n    });\n  } catch (error: any) {\n    return NextResponse.json(\n      { error: error.message || 'Failed to sign in.' },\n      { status: 400 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,oQAAiE,4BAA4B;AAA7F;;;;;;;;AAGA,MAAM,eAAe,oKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5B,OAAO,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IACrC,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;IAChC,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,SAAS,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAC9B;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,OAAO,aAAa,KAAK,CAAC;QAEhC,0BAA0B;QAC1B,MAAM,CAAC,KAAK,GAAG,MAAM,sHAAA,CAAA,KAAE,CACpB,MAAM,GACN,IAAI,CAAC,qHAAA,CAAA,QAAK,EACV,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,qHAAA,CAAA,QAAK,CAAC,KAAK,EAAE,KAAK,KAAK,GAChC,KAAK,CAAC;QAET,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA+C,GACxD;gBAAE,QAAQ;YAAI;QAElB;QAEA,oBAAoB;QACpB,MAAM,QAAQ,MAAM,CAAA,GAAA,wHAAA,CAAA,mBAAgB,AAAD,EAAE,KAAK,QAAQ,EAAE,KAAK,YAAY;QACrE,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA+C,GACxD;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,CAAA,GAAA,wHAAA,CAAA,aAAU,AAAD,EAAE;QAEjB,6DAA6D;QAC7D,MAAM,CAAA,GAAA,yIAAA,CAAA,cAAW,AAAD,EAAE,MAAM,KAAK,EAAE,EAAE,qHAAA,CAAA,eAAY,CAAC,OAAO;QAErD,mEAAmE;QACnE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,UAAU,KAAK,QAAQ,IAAI;YAC3B,SAAS,KAAK,OAAO,IAAI;QAC3B;IACF,EAAE,OAAO,OAAY;QACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,MAAM,OAAO,IAAI;QAAqB,GAC/C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}