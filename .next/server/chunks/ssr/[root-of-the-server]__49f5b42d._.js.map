{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  serial,\n  varchar,\n  text,\n  timestamp,\n  integer,\n} from 'drizzle-orm/pg-core';\nimport { relations } from 'drizzle-orm';\n\nexport const users = pgTable('users', {\n  id: serial('id').primaryKey(),\n  name: varchar('name', { length: 100 }),\n  email: varchar('email', { length: 255 }).notNull().unique(),\n  passwordHash: text('password_hash').notNull(),\n  role: varchar('role', { length: 20 }).notNull().default('member'),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n  updatedAt: timestamp('updated_at').notNull().defaultNow(),\n  deletedAt: timestamp('deleted_at'),\n});\n\nexport const teams = pgTable('teams', {\n  id: serial('id').primaryKey(),\n  name: varchar('name', { length: 100 }).notNull(),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n  updatedAt: timestamp('updated_at').notNull().defaultNow(),\n  stripeCustomerId: text('stripe_customer_id').unique(),\n  stripeSubscriptionId: text('stripe_subscription_id').unique(),\n  stripeProductId: text('stripe_product_id'),\n  planName: varchar('plan_name', { length: 50 }),\n  subscriptionStatus: varchar('subscription_status', { length: 20 }),\n});\n\nexport const teamMembers = pgTable('team_members', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id')\n    .notNull()\n    .references(() => users.id),\n  teamId: integer('team_id')\n    .notNull()\n    .references(() => teams.id),\n  role: varchar('role', { length: 50 }).notNull(),\n  joinedAt: timestamp('joined_at').notNull().defaultNow(),\n});\n\nexport const activityLogs = pgTable('activity_logs', {\n  id: serial('id').primaryKey(),\n  teamId: integer('team_id')\n    .notNull()\n    .references(() => teams.id),\n  userId: integer('user_id').references(() => users.id),\n  action: text('action').notNull(),\n  timestamp: timestamp('timestamp').notNull().defaultNow(),\n  ipAddress: varchar('ip_address', { length: 45 }),\n});\n\nexport const invitations = pgTable('invitations', {\n  id: serial('id').primaryKey(),\n  teamId: integer('team_id')\n    .notNull()\n    .references(() => teams.id),\n  email: varchar('email', { length: 255 }).notNull(),\n  role: varchar('role', { length: 50 }).notNull(),\n  invitedBy: integer('invited_by')\n    .notNull()\n    .references(() => users.id),\n  invitedAt: timestamp('invited_at').notNull().defaultNow(),\n  status: varchar('status', { length: 20 }).notNull().default('pending'),\n});\n\n// LMS ENTITIES\n\nexport const courses = pgTable('courses', {\n  id: serial('id').primaryKey(),\n  title: varchar('title', { length: 255 }).notNull(),\n  slug: varchar('slug', { length: 255 }).notNull().unique(),\n  description: text('description'),\n  price: integer('price').notNull().default(0), // en centimes\n  published: timestamp('published_at'),\n  imageUrl: varchar('image_url', { length: 2048 }),\n  authorId: integer('author_id').references(() => users.id),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n  updatedAt: timestamp('updated_at').notNull().defaultNow(),\n});\n\nexport const lessons = pgTable('lessons', {\n  id: serial('id').primaryKey(),\n  courseId: integer('course_id')\n    .notNull()\n    .references(() => courses.id),\n  title: varchar('title', { length: 255 }).notNull(),\n  slug: varchar('slug', { length: 255 }).notNull(),\n  content: text('content'), // HTML / Markdown / RichText\n  videoUrl: varchar('video_url', { length: 2048 }),\n  order: integer('order').notNull().default(0),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n});\n\nexport const enrollments = pgTable('enrollments', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  courseId: integer('course_id').notNull().references(() => courses.id),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n});\n\nexport const progress = pgTable('progress', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').notNull().references(() => users.id),\n  lessonId: integer('lesson_id').notNull().references(() => lessons.id),\n  completed: timestamp('completed_at'),\n});\nexport const quizzes = pgTable('quizzes', {\n  id: serial('id').primaryKey(),\n  lessonId: integer('lesson_id').references(() => lessons.id),\n  title: varchar('title', { length: 255 }).notNull(),\n});\n\nexport const questions = pgTable('questions', {\n  id: serial('id').primaryKey(),\n  quizId: integer('quiz_id').notNull().references(() => quizzes.id),\n  text: text('text').notNull(),\n});\n\nexport const answers = pgTable('answers', {\n  id: serial('id').primaryKey(),\n  questionId: integer('question_id').notNull().references(() => questions.id),\n  text: text('text').notNull(),\n  isCorrect: integer('is_correct').notNull().default(0),\n});\n\nexport const teamsRelations = relations(teams, ({ many }) => ({\n  teamMembers: many(teamMembers),\n  activityLogs: many(activityLogs),\n  invitations: many(invitations),\n}));\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  teamMembers: many(teamMembers),\n  invitationsSent: many(invitations),\n}));\n\nexport const invitationsRelations = relations(invitations, ({ one }) => ({\n  team: one(teams, {\n    fields: [invitations.teamId],\n    references: [teams.id],\n  }),\n  invitedBy: one(users, {\n    fields: [invitations.invitedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const teamMembersRelations = relations(teamMembers, ({ one }) => ({\n  user: one(users, {\n    fields: [teamMembers.userId],\n    references: [users.id],\n  }),\n  team: one(teams, {\n    fields: [teamMembers.teamId],\n    references: [teams.id],\n  }),\n}));\n\nexport const activityLogsRelations = relations(activityLogs, ({ one }) => ({\n  team: one(teams, {\n    fields: [activityLogs.teamId],\n    references: [teams.id],\n  }),\n  user: one(users, {\n    fields: [activityLogs.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const coursesRelations = relations(courses, ({ one, many }) => ({\n  author: one(users, {\n    fields: [courses.authorId],\n    references: [users.id],\n  }),\n  lessons: many(lessons),\n  enrollments: many(enrollments),\n}));\n\nexport const lessonsRelations = relations(lessons, ({ one, many }) => ({\n  course: one(courses, {\n    fields: [lessons.courseId],\n    references: [courses.id],\n  }),\n  progress: many(progress),\n  quizzes: many(quizzes),\n}));\n\nexport const enrollmentsRelations = relations(enrollments, ({ one }) => ({\n  user: one(users, {\n    fields: [enrollments.userId],\n    references: [users.id],\n  }),\n  course: one(courses, {\n    fields: [enrollments.courseId],\n    references: [courses.id],\n  }),\n}));\n\nexport const progressRelations = relations(progress, ({ one }) => ({\n  user: one(users, {\n    fields: [progress.userId],\n    references: [users.id],\n  }),\n  lesson: one(lessons, {\n    fields: [progress.lessonId],\n    references: [lessons.id],\n  }),\n}));\n\nexport const quizzesRelations = relations(quizzes, ({ one, many }) => ({\n  lesson: one(lessons, {\n    fields: [quizzes.lessonId],\n    references: [lessons.id],\n  }),\n  questions: many(questions),\n}));\n\nexport const questionsRelations = relations(questions, ({ one, many }) => ({\n  quiz: one(quizzes, {\n    fields: [questions.quizId],\n    references: [quizzes.id],\n  }),\n  answers: many(answers),\n}));\n\nexport const answersRelations = relations(answers, ({ one }) => ({\n  question: one(questions, {\n    fields: [answers.questionId],\n    references: [questions.id],\n  }),\n}));\n\n\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type Team = typeof teams.$inferSelect;\nexport type NewTeam = typeof teams.$inferInsert;\nexport type TeamMember = typeof teamMembers.$inferSelect;\nexport type NewTeamMember = typeof teamMembers.$inferInsert;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\nexport type NewActivityLog = typeof activityLogs.$inferInsert;\nexport type Invitation = typeof invitations.$inferSelect;\nexport type NewInvitation = typeof invitations.$inferInsert;\nexport type TeamDataWithMembers = Team & {\n  teamMembers: (TeamMember & {\n    user: Pick<User, 'id' | 'name' | 'email'>;\n  })[];\n};\nexport type Course = typeof courses.$inferSelect;\nexport type NewCourse = typeof courses.$inferInsert;\n\nexport type Lesson = typeof lessons.$inferSelect;\nexport type NewLesson = typeof lessons.$inferInsert;\n\nexport type Enrollment = typeof enrollments.$inferSelect;\nexport type NewEnrollment = typeof enrollments.$inferInsert;\n\n\nexport enum ActivityType {\n  SIGN_UP = 'SIGN_UP',\n  SIGN_IN = 'SIGN_IN',\n  SIGN_OUT = 'SIGN_OUT',\n  UPDATE_PASSWORD = 'UPDATE_PASSWORD',\n  DELETE_ACCOUNT = 'DELETE_ACCOUNT',\n  UPDATE_ACCOUNT = 'UPDATE_ACCOUNT',\n  CREATE_TEAM = 'CREATE_TEAM',\n  REMOVE_TEAM_MEMBER = 'REMOVE_TEAM_MEMBER',\n  INVITE_TEAM_MEMBER = 'INVITE_TEAM_MEMBER',\n  ACCEPT_INVITATION = 'ACCEPT_INVITATION',\n}\n\n\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;AAEO,MAAM,QAAQ,CAAA,GAAA,iWAAA,CAAA,UAAO,AAAD,EAAE,SAAS;IACpC,IAAI,CAAA,GAAA,6WAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,MAAM,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;QAAE,QAAQ;IAAI;IACpC,OAAO,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,SAAS;QAAE,QAAQ;IAAI,GAAG,OAAO,GAAG,MAAM;IACzD,cAAc,CAAA,GAAA,2WAAA,CAAA,OAAI,AAAD,EAAE,iBAAiB,OAAO;IAC3C,MAAM,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;QAAE,QAAQ;IAAG,GAAG,OAAO,GAAG,OAAO,CAAC;IACxD,WAAW,CAAA,GAAA,gXAAA,CAAA,YAAS,AAAD,EAAE,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,CAAA,GAAA,gXAAA,CAAA,YAAS,AAAD,EAAE,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,CAAA,GAAA,gXAAA,CAAA,YAAS,AAAD,EAAE;AACvB;AAEO,MAAM,QAAQ,CAAA,GAAA,iWAAA,CAAA,UAAO,AAAD,EAAE,SAAS;IACpC,IAAI,CAAA,GAAA,6WAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,MAAM,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;QAAE,QAAQ;IAAI,GAAG,OAAO;IAC9C,WAAW,CAAA,GAAA,gXAAA,CAAA,YAAS,AAAD,EAAE,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,CAAA,GAAA,gXAAA,CAAA,YAAS,AAAD,EAAE,cAAc,OAAO,GAAG,UAAU;IACvD,kBAAkB,CAAA,GAAA,2WAAA,CAAA,OAAI,AAAD,EAAE,sBAAsB,MAAM;IACnD,sBAAsB,CAAA,GAAA,2WAAA,CAAA,OAAI,AAAD,EAAE,0BAA0B,MAAM;IAC3D,iBAAiB,CAAA,GAAA,2WAAA,CAAA,OAAI,AAAD,EAAE;IACtB,UAAU,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,aAAa;QAAE,QAAQ;IAAG;IAC5C,oBAAoB,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,uBAAuB;QAAE,QAAQ;IAAG;AAClE;AAEO,MAAM,cAAc,CAAA,GAAA,iWAAA,CAAA,UAAO,AAAD,EAAE,gBAAgB;IACjD,IAAI,CAAA,GAAA,6WAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,QAAQ,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,WACb,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5B,QAAQ,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,WACb,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5B,MAAM,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;QAAE,QAAQ;IAAG,GAAG,OAAO;IAC7C,UAAU,CAAA,GAAA,gXAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU;AACvD;AAEO,MAAM,eAAe,CAAA,GAAA,iWAAA,CAAA,UAAO,AAAD,EAAE,iBAAiB;IACnD,IAAI,CAAA,GAAA,6WAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,QAAQ,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,WACb,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5B,QAAQ,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,WAAW,UAAU,CAAC,IAAM,MAAM,EAAE;IACpD,QAAQ,CAAA,GAAA,2WAAA,CAAA,OAAI,AAAD,EAAE,UAAU,OAAO;IAC9B,WAAW,CAAA,GAAA,gXAAA,CAAA,YAAS,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU;IACtD,WAAW,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,cAAc;QAAE,QAAQ;IAAG;AAChD;AAEO,MAAM,cAAc,CAAA,GAAA,iWAAA,CAAA,UAAO,AAAD,EAAE,eAAe;IAChD,IAAI,CAAA,GAAA,6WAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,QAAQ,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,WACb,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5B,OAAO,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,SAAS;QAAE,QAAQ;IAAI,GAAG,OAAO;IAChD,MAAM,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;QAAE,QAAQ;IAAG,GAAG,OAAO;IAC7C,WAAW,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,cAChB,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE;IAC5B,WAAW,CAAA,GAAA,gXAAA,CAAA,YAAS,AAAD,EAAE,cAAc,OAAO,GAAG,UAAU;IACvD,QAAQ,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,UAAU;QAAE,QAAQ;IAAG,GAAG,OAAO,GAAG,OAAO,CAAC;AAC9D;AAIO,MAAM,UAAU,CAAA,GAAA,iWAAA,CAAA,UAAO,AAAD,EAAE,WAAW;IACxC,IAAI,CAAA,GAAA,6WAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,OAAO,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,SAAS;QAAE,QAAQ;IAAI,GAAG,OAAO;IAChD,MAAM,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;QAAE,QAAQ;IAAI,GAAG,OAAO,GAAG,MAAM;IACvD,aAAa,CAAA,GAAA,2WAAA,CAAA,OAAI,AAAD,EAAE;IAClB,OAAO,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,SAAS,OAAO,GAAG,OAAO,CAAC;IAC1C,WAAW,CAAA,GAAA,gXAAA,CAAA,YAAS,AAAD,EAAE;IACrB,UAAU,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,aAAa;QAAE,QAAQ;IAAK;IAC9C,UAAU,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,aAAa,UAAU,CAAC,IAAM,MAAM,EAAE;IACxD,WAAW,CAAA,GAAA,gXAAA,CAAA,YAAS,AAAD,EAAE,cAAc,OAAO,GAAG,UAAU;IACvD,WAAW,CAAA,GAAA,gXAAA,CAAA,YAAS,AAAD,EAAE,cAAc,OAAO,GAAG,UAAU;AACzD;AAEO,MAAM,UAAU,CAAA,GAAA,iWAAA,CAAA,UAAO,AAAD,EAAE,WAAW;IACxC,IAAI,CAAA,GAAA,6WAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,UAAU,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,aACf,OAAO,GACP,UAAU,CAAC,IAAM,QAAQ,EAAE;IAC9B,OAAO,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,SAAS;QAAE,QAAQ;IAAI,GAAG,OAAO;IAChD,MAAM,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;QAAE,QAAQ;IAAI,GAAG,OAAO;IAC9C,SAAS,CAAA,GAAA,2WAAA,CAAA,OAAI,AAAD,EAAE;IACd,UAAU,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,aAAa;QAAE,QAAQ;IAAK;IAC9C,OAAO,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,SAAS,OAAO,GAAG,OAAO,CAAC;IAC1C,WAAW,CAAA,GAAA,gXAAA,CAAA,YAAS,AAAD,EAAE,cAAc,OAAO,GAAG,UAAU;AACzD;AAEO,MAAM,cAAc,CAAA,GAAA,iWAAA,CAAA,UAAO,AAAD,EAAE,eAAe;IAChD,IAAI,CAAA,GAAA,6WAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,QAAQ,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,UAAU,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU,CAAC,IAAM,QAAQ,EAAE;IACpE,WAAW,CAAA,GAAA,gXAAA,CAAA,YAAS,AAAD,EAAE,cAAc,OAAO,GAAG,UAAU;AACzD;AAEO,MAAM,WAAW,CAAA,GAAA,iWAAA,CAAA,UAAO,AAAD,EAAE,YAAY;IAC1C,IAAI,CAAA,GAAA,6WAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,QAAQ,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,MAAM,EAAE;IAC9D,UAAU,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,aAAa,OAAO,GAAG,UAAU,CAAC,IAAM,QAAQ,EAAE;IACpE,WAAW,CAAA,GAAA,gXAAA,CAAA,YAAS,AAAD,EAAE;AACvB;AACO,MAAM,UAAU,CAAA,GAAA,iWAAA,CAAA,UAAO,AAAD,EAAE,WAAW;IACxC,IAAI,CAAA,GAAA,6WAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,UAAU,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,aAAa,UAAU,CAAC,IAAM,QAAQ,EAAE;IAC1D,OAAO,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,SAAS;QAAE,QAAQ;IAAI,GAAG,OAAO;AAClD;AAEO,MAAM,YAAY,CAAA,GAAA,iWAAA,CAAA,UAAO,AAAD,EAAE,aAAa;IAC5C,IAAI,CAAA,GAAA,6WAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,QAAQ,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,WAAW,OAAO,GAAG,UAAU,CAAC,IAAM,QAAQ,EAAE;IAChE,MAAM,CAAA,GAAA,2WAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,OAAO;AAC5B;AAEO,MAAM,UAAU,CAAA,GAAA,iWAAA,CAAA,UAAO,AAAD,EAAE,WAAW;IACxC,IAAI,CAAA,GAAA,6WAAA,CAAA,SAAM,AAAD,EAAE,MAAM,UAAU;IAC3B,YAAY,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,eAAe,OAAO,GAAG,UAAU,CAAC,IAAM,UAAU,EAAE;IAC1E,MAAM,CAAA,GAAA,2WAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,OAAO;IAC1B,WAAW,CAAA,GAAA,8WAAA,CAAA,UAAO,AAAD,EAAE,cAAc,OAAO,GAAG,OAAO,CAAC;AACrD;AAEO,MAAM,iBAAiB,CAAA,GAAA,uVAAA,CAAA,YAAS,AAAD,EAAE,OAAO,CAAC,EAAE,IAAI,EAAE,GAAK,CAAC;QAC5D,aAAa,KAAK;QAClB,cAAc,KAAK;QACnB,aAAa,KAAK;IACpB,CAAC;AAEM,MAAM,iBAAiB,CAAA,GAAA,uVAAA,CAAA,YAAS,AAAD,EAAE,OAAO,CAAC,EAAE,IAAI,EAAE,GAAK,CAAC;QAC5D,aAAa,KAAK;QAClB,iBAAiB,KAAK;IACxB,CAAC;AAEM,MAAM,uBAAuB,CAAA,GAAA,uVAAA,CAAA,YAAS,AAAD,EAAE,aAAa,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACvE,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,YAAY,MAAM;aAAC;YAC5B,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;QACA,WAAW,IAAI,OAAO;YACpB,QAAQ;gBAAC,YAAY,SAAS;aAAC;YAC/B,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;IACF,CAAC;AAEM,MAAM,uBAAuB,CAAA,GAAA,uVAAA,CAAA,YAAS,AAAD,EAAE,aAAa,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACvE,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,YAAY,MAAM;aAAC;YAC5B,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;QACA,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,YAAY,MAAM;aAAC;YAC5B,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;IACF,CAAC;AAEM,MAAM,wBAAwB,CAAA,GAAA,uVAAA,CAAA,YAAS,AAAD,EAAE,cAAc,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACzE,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,aAAa,MAAM;aAAC;YAC7B,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;QACA,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,aAAa,MAAM;aAAC;YAC7B,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;IACF,CAAC;AAEM,MAAM,mBAAmB,CAAA,GAAA,uVAAA,CAAA,YAAS,AAAD,EAAE,SAAS,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAK,CAAC;QACrE,QAAQ,IAAI,OAAO;YACjB,QAAQ;gBAAC,QAAQ,QAAQ;aAAC;YAC1B,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;QACA,SAAS,KAAK;QACd,aAAa,KAAK;IACpB,CAAC;AAEM,MAAM,mBAAmB,CAAA,GAAA,uVAAA,CAAA,YAAS,AAAD,EAAE,SAAS,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAK,CAAC;QACrE,QAAQ,IAAI,SAAS;YACnB,QAAQ;gBAAC,QAAQ,QAAQ;aAAC;YAC1B,YAAY;gBAAC,QAAQ,EAAE;aAAC;QAC1B;QACA,UAAU,KAAK;QACf,SAAS,KAAK;IAChB,CAAC;AAEM,MAAM,uBAAuB,CAAA,GAAA,uVAAA,CAAA,YAAS,AAAD,EAAE,aAAa,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACvE,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,YAAY,MAAM;aAAC;YAC5B,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;QACA,QAAQ,IAAI,SAAS;YACnB,QAAQ;gBAAC,YAAY,QAAQ;aAAC;YAC9B,YAAY;gBAAC,QAAQ,EAAE;aAAC;QAC1B;IACF,CAAC;AAEM,MAAM,oBAAoB,CAAA,GAAA,uVAAA,CAAA,YAAS,AAAD,EAAE,UAAU,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACjE,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,SAAS,MAAM;aAAC;YACzB,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;QACA,QAAQ,IAAI,SAAS;YACnB,QAAQ;gBAAC,SAAS,QAAQ;aAAC;YAC3B,YAAY;gBAAC,QAAQ,EAAE;aAAC;QAC1B;IACF,CAAC;AAEM,MAAM,mBAAmB,CAAA,GAAA,uVAAA,CAAA,YAAS,AAAD,EAAE,SAAS,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAK,CAAC;QACrE,QAAQ,IAAI,SAAS;YACnB,QAAQ;gBAAC,QAAQ,QAAQ;aAAC;YAC1B,YAAY;gBAAC,QAAQ,EAAE;aAAC;QAC1B;QACA,WAAW,KAAK;IAClB,CAAC;AAEM,MAAM,qBAAqB,CAAA,GAAA,uVAAA,CAAA,YAAS,AAAD,EAAE,WAAW,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAK,CAAC;QACzE,MAAM,IAAI,SAAS;YACjB,QAAQ;gBAAC,UAAU,MAAM;aAAC;YAC1B,YAAY;gBAAC,QAAQ,EAAE;aAAC;QAC1B;QACA,SAAS,KAAK;IAChB,CAAC;AAEM,MAAM,mBAAmB,CAAA,GAAA,uVAAA,CAAA,YAAS,AAAD,EAAE,SAAS,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QAC/D,UAAU,IAAI,WAAW;YACvB,QAAQ;gBAAC,QAAQ,UAAU;aAAC;YAC5B,YAAY;gBAAC,UAAU,EAAE;aAAC;QAC5B;IACF,CAAC;AA4BM,IAAA,AAAK,sCAAA;;;;;;;;;;;WAAA","debugId":null}},
    {"offset": {"line": 400, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/db/drizzle.ts"],"sourcesContent":["import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from './schema';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nif (!process.env.POSTGRES_URL) {\n  throw new Error('POSTGRES_URL environment variable is not set');\n}\n\nexport const client = postgres(process.env.POSTGRES_URL);\nexport const db = drizzle(client, { schema });\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEA,yLAAA,CAAA,UAAM,CAAC,MAAM;AAEb,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;IAC7B,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,SAAS,CAAA,GAAA,6LAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY;AAChD,MAAM,KAAK,CAAA,GAAA,sWAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 424, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/auth/session.ts"],"sourcesContent":["import { compare, hash } from 'bcryptjs';\nimport { SignJWT, jwtVerify } from 'jose';\nimport { cookies } from 'next/headers';\nimport { NewUser } from '@/lib/db/schema';\n\nconst key = new TextEncoder().encode(process.env.AUTH_SECRET);\nconst SALT_ROUNDS = 10;\n\nexport async function hashPassword(password: string) {\n  return hash(password, SALT_ROUNDS);\n}\n\nexport async function comparePasswords(\n  plainTextPassword: string,\n  hashedPassword: string\n) {\n  return compare(plainTextPassword, hashedPassword);\n}\n\ntype SessionData = {\n  user: { id: number };\n  expires: string;\n};\n\nexport async function signToken(payload: SessionData) {\n  return await new SignJWT(payload)\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime('1 day from now')\n    .sign(key);\n}\n\nexport async function verifyToken(input: string) {\n  const { payload } = await jwtVerify(input, key, {\n    algorithms: ['HS256'],\n  });\n  return payload as SessionData;\n}\n\nexport async function getSession() {\n  const session = (await cookies()).get('session')?.value;\n  if (!session) return null;\n  return await verifyToken(session);\n}\n\nexport async function setSession(user: NewUser) {\n  const expiresInOneDay = new Date(Date.now() + 24 * 60 * 60 * 1000);\n  const session: SessionData = {\n    user: { id: user.id! },\n    expires: expiresInOneDay.toISOString(),\n  };\n  const encryptedSession = await signToken(session);\n  (await cookies()).set('session', encryptedSession, {\n    expires: expiresInOneDay,\n    httpOnly: true,\n    secure: true,\n    sameSite: 'lax',\n  });\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;AAAA;AACA;;;;AAGA,MAAM,MAAM,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,WAAW;AAC5D,MAAM,cAAc;AAEb,eAAe,aAAa,QAAgB;IACjD,OAAO,CAAA,GAAA,sLAAA,CAAA,OAAI,AAAD,EAAE,UAAU;AACxB;AAEO,eAAe,iBACpB,iBAAyB,EACzB,cAAsB;IAEtB,OAAO,CAAA,GAAA,sLAAA,CAAA,UAAO,AAAD,EAAE,mBAAmB;AACpC;AAOO,eAAe,UAAU,OAAoB;IAClD,OAAO,MAAM,IAAI,uMAAA,CAAA,UAAO,CAAC,SACtB,kBAAkB,CAAC;QAAE,KAAK;IAAQ,GAClC,WAAW,GACX,iBAAiB,CAAC,kBAClB,IAAI,CAAC;AACV;AAEO,eAAe,YAAY,KAAa;IAC7C,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,yMAAA,CAAA,YAAS,AAAD,EAAE,OAAO,KAAK;QAC9C,YAAY;YAAC;SAAQ;IACvB;IACA,OAAO;AACT;AAEO,eAAe;IACpB,MAAM,UAAU,CAAC,MAAM,CAAA,GAAA,8QAAA,CAAA,UAAO,AAAD,GAAG,EAAE,GAAG,CAAC,YAAY;IAClD,IAAI,CAAC,SAAS,OAAO;IACrB,OAAO,MAAM,YAAY;AAC3B;AAEO,eAAe,WAAW,IAAa;IAC5C,MAAM,kBAAkB,IAAI,KAAK,KAAK,GAAG,KAAK,KAAK,KAAK,KAAK;IAC7D,MAAM,UAAuB;QAC3B,MAAM;YAAE,IAAI,KAAK,EAAE;QAAE;QACrB,SAAS,gBAAgB,WAAW;IACtC;IACA,MAAM,mBAAmB,MAAM,UAAU;IACzC,CAAC,MAAM,CAAA,GAAA,8QAAA,CAAA,UAAO,AAAD,GAAG,EAAE,GAAG,CAAC,WAAW,kBAAkB;QACjD,SAAS;QACT,UAAU;QACV,QAAQ;QACR,UAAU;IACZ;AACF","debugId":null}},
    {"offset": {"line": 525, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/db/queries.ts"],"sourcesContent":["import { desc, and, eq, isNull } from 'drizzle-orm';\nimport { db } from './drizzle';\nimport { activityLogs, teamMembers, teams, users } from './schema';\nimport { cookies } from 'next/headers';\nimport { verifyToken } from '@/lib/auth/session';\n\nexport async function getUser() {\n  const sessionCookie = (await cookies()).get('session');\n  if (!sessionCookie || !sessionCookie.value) {\n    return null;\n  }\n\n  const sessionData = await verifyToken(sessionCookie.value);\n  if (\n    !sessionData ||\n    !sessionData.user ||\n    typeof sessionData.user.id !== 'number'\n  ) {\n    return null;\n  }\n\n  if (new Date(sessionData.expires) < new Date()) {\n    return null;\n  }\n\n  const user = await db\n    .select()\n    .from(users)\n    .where(and(eq(users.id, sessionData.user.id), isNull(users.deletedAt)))\n    .limit(1);\n\n  if (user.length === 0) {\n    return null;\n  }\n\n  return user[0];\n}\n\nexport async function getTeamByStripeCustomerId(customerId: string) {\n  const result = await db\n    .select()\n    .from(teams)\n    .where(eq(teams.stripeCustomerId, customerId))\n    .limit(1);\n\n  return result.length > 0 ? result[0] : null;\n}\n\nexport async function updateTeamSubscription(\n  teamId: number,\n  subscriptionData: {\n    stripeSubscriptionId: string | null;\n    stripeProductId: string | null;\n    planName: string | null;\n    subscriptionStatus: string;\n  }\n) {\n  await db\n    .update(teams)\n    .set({\n      ...subscriptionData,\n      updatedAt: new Date()\n    })\n    .where(eq(teams.id, teamId));\n}\n\nexport async function getUserWithTeam(userId: number) {\n  const result = await db\n    .select({\n      user: users,\n      teamId: teamMembers.teamId\n    })\n    .from(users)\n    .leftJoin(teamMembers, eq(users.id, teamMembers.userId))\n    .where(eq(users.id, userId))\n    .limit(1);\n\n  return result[0];\n}\n\nexport async function getActivityLogs() {\n  const user = await getUser();\n  if (!user) {\n    throw new Error('User not authenticated');\n  }\n\n  return await db\n    .select({\n      id: activityLogs.id,\n      action: activityLogs.action,\n      timestamp: activityLogs.timestamp,\n      ipAddress: activityLogs.ipAddress,\n      userName: users.name\n    })\n    .from(activityLogs)\n    .leftJoin(users, eq(activityLogs.userId, users.id))\n    .where(eq(activityLogs.userId, user.id))\n    .orderBy(desc(activityLogs.timestamp))\n    .limit(10);\n}\n\nexport async function getTeamForUser() {\n  const user = await getUser();\n  if (!user) {\n    return null;\n  }\n\n  const result = await db.query.teamMembers.findFirst({\n    where: eq(teamMembers.userId, user.id),\n    with: {\n      team: {\n        with: {\n          teamMembers: {\n            with: {\n              user: {\n                columns: {\n                  id: true,\n                  name: true,\n                  email: true\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n\n  return result?.team || null;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 623, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/payments/stripe.ts"],"sourcesContent":["import Stripe from 'stripe';\nimport { redirect } from 'next/navigation';\nimport { Team } from '@/lib/db/schema';\nimport {\n  getTeamByStripeCustomerId,\n  getUser,\n  updateTeamSubscription\n} from '@/lib/db/queries';\n\nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2025-04-30.basil'\n});\n\nexport async function createCheckoutSession({\n  team,\n  priceId\n}: {\n  team: Team | null;\n  priceId: string;\n}) {\n  const user = await getUser();\n\n  if (!team || !user) {\n    redirect(`/sign-up?redirect=checkout&priceId=${priceId}`);\n  }\n\n  const session = await stripe.checkout.sessions.create({\n    payment_method_types: ['card'],\n    line_items: [\n      {\n        price: priceId,\n        quantity: 1\n      }\n    ],\n    mode: 'subscription',\n    success_url: `${process.env.BASE_URL}/api/stripe/checkout?session_id={CHECKOUT_SESSION_ID}`,\n    cancel_url: `${process.env.BASE_URL}/pricing`,\n    customer: team.stripeCustomerId || undefined,\n    client_reference_id: user.id.toString(),\n    allow_promotion_codes: true,\n    subscription_data: {\n      trial_period_days: 14\n    }\n  });\n\n  redirect(session.url!);\n}\n\nexport async function createCustomerPortalSession(team: Team) {\n  if (!team.stripeCustomerId || !team.stripeProductId) {\n    redirect('/pricing');\n  }\n\n  let configuration: Stripe.BillingPortal.Configuration;\n  const configurations = await stripe.billingPortal.configurations.list();\n\n  if (configurations.data.length > 0) {\n    configuration = configurations.data[0];\n  } else {\n    const product = await stripe.products.retrieve(team.stripeProductId);\n    if (!product.active) {\n      throw new Error(\"Team's product is not active in Stripe\");\n    }\n\n    const prices = await stripe.prices.list({\n      product: product.id,\n      active: true\n    });\n    if (prices.data.length === 0) {\n      throw new Error(\"No active prices found for the team's product\");\n    }\n\n    configuration = await stripe.billingPortal.configurations.create({\n      business_profile: {\n        headline: 'Manage your subscription'\n      },\n      features: {\n        subscription_update: {\n          enabled: true,\n          default_allowed_updates: ['price', 'quantity', 'promotion_code'],\n          proration_behavior: 'create_prorations',\n          products: [\n            {\n              product: product.id,\n              prices: prices.data.map((price) => price.id)\n            }\n          ]\n        },\n        subscription_cancel: {\n          enabled: true,\n          mode: 'at_period_end',\n          cancellation_reason: {\n            enabled: true,\n            options: [\n              'too_expensive',\n              'missing_features',\n              'switched_service',\n              'unused',\n              'other'\n            ]\n          }\n        },\n        payment_method_update: {\n          enabled: true\n        }\n      }\n    });\n  }\n\n  return stripe.billingPortal.sessions.create({\n    customer: team.stripeCustomerId,\n    return_url: `${process.env.BASE_URL}/dashboard`,\n    configuration: configuration.id\n  });\n}\n\nexport async function handleSubscriptionChange(\n  subscription: Stripe.Subscription\n) {\n  const customerId = subscription.customer as string;\n  const subscriptionId = subscription.id;\n  const status = subscription.status;\n\n  const team = await getTeamByStripeCustomerId(customerId);\n\n  if (!team) {\n    console.error('Team not found for Stripe customer:', customerId);\n    return;\n  }\n\n  if (status === 'active' || status === 'trialing') {\n    const plan = subscription.items.data[0]?.plan;\n    await updateTeamSubscription(team.id, {\n      stripeSubscriptionId: subscriptionId,\n      stripeProductId: plan?.product as string,\n      planName: (plan?.product as Stripe.Product).name,\n      subscriptionStatus: status\n    });\n  } else if (status === 'canceled' || status === 'unpaid') {\n    await updateTeamSubscription(team.id, {\n      stripeSubscriptionId: null,\n      stripeProductId: null,\n      planName: null,\n      subscriptionStatus: status\n    });\n  }\n}\n\nexport async function getStripePrices() {\n  const prices = await stripe.prices.list({\n    expand: ['data.product'],\n    active: true,\n    type: 'recurring'\n  });\n\n  return prices.data.map((price) => ({\n    id: price.id,\n    productId:\n      typeof price.product === 'string' ? price.product : price.product.id,\n    unitAmount: price.unit_amount,\n    currency: price.currency,\n    interval: price.recurring?.interval,\n    trialPeriodDays: price.recurring?.trial_period_days\n  }));\n}\n\nexport async function getStripeProducts() {\n  const products = await stripe.products.list({\n    active: true,\n    expand: ['data.default_price']\n  });\n\n  return products.data.map((product) => ({\n    id: product.id,\n    name: product.name,\n    description: product.description,\n    defaultPriceId:\n      typeof product.default_price === 'string'\n        ? product.default_price\n        : product.default_price?.id\n  }));\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 795, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/auth/middleware.ts"],"sourcesContent":["import { z } from 'zod';\nimport { TeamDataWithMembers, User } from '@/lib/db/schema';\nimport { getTeamForUser, getUser } from '@/lib/db/queries';\nimport { redirect } from 'next/navigation';\n\nexport type ActionState = {\n  error?: string;\n  success?: string;\n  [key: string]: any; // This allows for additional properties\n};\n\ntype ValidatedActionFunction<S extends z.ZodType<any, any>, T> = (\n  data: z.infer<S>,\n  formData: FormData\n) => Promise<T>;\n\nexport function validatedAction<S extends z.ZodType<any, any>, T>(\n  schema: S,\n  action: ValidatedActionFunction<S, T>\n) {\n  return async (prevState: ActionState, formData: FormData) => {\n    const result = schema.safeParse(Object.fromEntries(formData));\n    if (!result.success) {\n      return { error: result.error.errors[0].message };\n    }\n\n    return action(result.data, formData);\n  };\n}\n\ntype ValidatedActionWithUserFunction<S extends z.ZodType<any, any>, T> = (\n  data: z.infer<S>,\n  formData: FormData,\n  user: User\n) => Promise<T>;\n\nexport function validatedActionWithUser<S extends z.ZodType<any, any>, T>(\n  schema: S,\n  action: ValidatedActionWithUserFunction<S, T>\n) {\n  return async (prevState: ActionState, formData: FormData) => {\n    const user = await getUser();\n    if (!user) {\n      throw new Error('User is not authenticated');\n    }\n\n    const result = schema.safeParse(Object.fromEntries(formData));\n    if (!result.success) {\n      return { error: result.error.errors[0].message };\n    }\n\n    return action(result.data, formData, user);\n  };\n}\n\ntype ActionWithTeamFunction<T> = (\n  formData: FormData,\n  team: TeamDataWithMembers\n) => Promise<T>;\n\nexport function withTeam<T>(action: ActionWithTeamFunction<T>) {\n  return async (formData: FormData): Promise<T> => {\n    const user = await getUser();\n    if (!user) {\n      redirect('/sign-in');\n    }\n\n    const team = await getTeamForUser();\n    if (!team) {\n      throw new Error('Team not found');\n    }\n\n    return action(formData, team);\n  };\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAAA;;;AAaO,SAAS,gBACd,MAAS,EACT,MAAqC;IAErC,OAAO,OAAO,WAAwB;QACpC,MAAM,SAAS,OAAO,SAAS,CAAC,OAAO,WAAW,CAAC;QACnD,IAAI,CAAC,OAAO,OAAO,EAAE;YACnB,OAAO;gBAAE,OAAO,OAAO,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO;YAAC;QACjD;QAEA,OAAO,OAAO,OAAO,IAAI,EAAE;IAC7B;AACF;AAQO,SAAS,wBACd,MAAS,EACT,MAA6C;IAE7C,OAAO,OAAO,WAAwB;QACpC,MAAM,OAAO,MAAM,CAAA,GAAA,oHAAA,CAAA,UAAO,AAAD;QACzB,IAAI,CAAC,MAAM;YACT,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,SAAS,OAAO,SAAS,CAAC,OAAO,WAAW,CAAC;QACnD,IAAI,CAAC,OAAO,OAAO,EAAE;YACnB,OAAO;gBAAE,OAAO,OAAO,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO;YAAC;QACjD;QAEA,OAAO,OAAO,OAAO,IAAI,EAAE,UAAU;IACvC;AACF;AAOO,SAAS,SAAY,MAAiC;IAC3D,OAAO,OAAO;QACZ,MAAM,OAAO,MAAM,CAAA,GAAA,oHAAA,CAAA,UAAO,AAAD;QACzB,IAAI,CAAC,MAAM;YACT,CAAA,GAAA,oUAAA,CAAA,WAAQ,AAAD,EAAE;QACX;QAEA,MAAM,OAAO,MAAM,CAAA,GAAA,oHAAA,CAAA,iBAAc,AAAD;QAChC,IAAI,CAAC,MAAM;YACT,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO,OAAO,UAAU;IAC1B;AACF","debugId":null}},
    {"offset": {"line": 848, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/app/%5Blocale%5D/%28login%29/actions.ts"],"sourcesContent":["'use server';\n\nimport { z } from 'zod';\nimport { and, eq, sql } from 'drizzle-orm';\nimport { db } from '@/lib/db/drizzle';\nimport {\n  User,\n  users,\n  teams,\n  teamMembers,\n  activityLogs,\n  type NewUser,\n  type NewTeam,\n  type NewTeamMember,\n  type NewActivityLog,\n  ActivityType,\n  invitations\n} from '@/lib/db/schema';\nimport { comparePasswords, hashPassword, setSession } from '@/lib/auth/session';\nimport { redirect } from 'next/navigation';\nimport { cookies } from 'next/headers';\nimport { createCheckoutSession } from '@/lib/payments/stripe';\nimport { getUser, getUserWithTeam } from '@/lib/db/queries';\nimport {\n  validatedAction,\n  validatedActionWithUser\n} from '@/lib/auth/middleware';\n\nasync function logActivity(\n  teamId: number | null | undefined,\n  userId: number,\n  type: ActivityType,\n  ipAddress?: string\n) {\n  if (teamId === null || teamId === undefined) {\n    return;\n  }\n  const newActivity: NewActivityLog = {\n    teamId,\n    userId,\n    action: type,\n    ipAddress: ipAddress || ''\n  };\n  await db.insert(activityLogs).values(newActivity);\n}\n\nconst signInSchema = z.object({\n  email: z.string().email().min(3).max(255),\n  password: z.string().min(8).max(100)\n});\n\nexport const signIn = validatedAction(signInSchema, async (data, formData) => {\n  const { email, password } = data;\n\n  const userWithTeam = await db\n    .select({\n      user: users,\n      team: teams\n    })\n    .from(users)\n    .leftJoin(teamMembers, eq(users.id, teamMembers.userId))\n    .leftJoin(teams, eq(teamMembers.teamId, teams.id))\n    .where(eq(users.email, email))\n    .limit(1);\n\n  if (userWithTeam.length === 0) {\n    return {\n      error: 'Invalid email or password. Please try again.',\n      email,\n      password\n    };\n  }\n\n  const { user: foundUser, team: foundTeam } = userWithTeam[0];\n\n  const isPasswordValid = await comparePasswords(\n    password,\n    foundUser.passwordHash\n  );\n\n  if (!isPasswordValid) {\n    return {\n      error: 'Invalid email or password. Please try again.',\n      email,\n      password\n    };\n  }\n\n  await Promise.all([\n    setSession(foundUser),\n    logActivity(foundTeam?.id, foundUser.id, ActivityType.SIGN_IN)\n  ]);\n\n  const redirectTo = formData.get('redirect') as string | null;\n  if (redirectTo === 'checkout') {\n    const priceId = formData.get('priceId') as string;\n    return createCheckoutSession({ team: foundTeam, priceId });\n  }\n\n  redirect('/dashboard');\n});\n\nconst signUpSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n  inviteId: z.string().optional()\n});\n\nexport const signUp = validatedAction(signUpSchema, async (data, formData) => {\n  const { email, password, inviteId } = data;\n\n  const existingUser = await db\n    .select()\n    .from(users)\n    .where(eq(users.email, email))\n    .limit(1);\n\n  if (existingUser.length > 0) {\n    return {\n      error: 'Failed to create user. Please try again.',\n      email,\n      password\n    };\n  }\n\n  const passwordHash = await hashPassword(password);\n\n  const newUser: NewUser = {\n    email,\n    passwordHash,\n    role: 'owner' // Default role, will be overridden if there's an invitation\n  };\n\n  const [createdUser] = await db.insert(users).values(newUser).returning();\n\n  if (!createdUser) {\n    return {\n      error: 'Failed to create user. Please try again.',\n      email,\n      password\n    };\n  }\n\n  let teamId: number;\n  let userRole: string;\n  let createdTeam: typeof teams.$inferSelect | null = null;\n\n  if (inviteId) {\n    // Check if there's a valid invitation\n    const [invitation] = await db\n      .select()\n      .from(invitations)\n      .where(\n        and(\n          eq(invitations.id, parseInt(inviteId)),\n          eq(invitations.email, email),\n          eq(invitations.status, 'pending')\n        )\n      )\n      .limit(1);\n\n    if (invitation) {\n      teamId = invitation.teamId;\n      userRole = invitation.role;\n\n      await db\n        .update(invitations)\n        .set({ status: 'accepted' })\n        .where(eq(invitations.id, invitation.id));\n\n      await logActivity(teamId, createdUser.id, ActivityType.ACCEPT_INVITATION);\n\n      [createdTeam] = await db\n        .select()\n        .from(teams)\n        .where(eq(teams.id, teamId))\n        .limit(1);\n    } else {\n      return { error: 'Invalid or expired invitation.', email, password };\n    }\n  } else {\n    // Create a new team if there's no invitation\n    const newTeam: NewTeam = {\n      name: `${email}'s Team`\n    };\n\n    [createdTeam] = await db.insert(teams).values(newTeam).returning();\n\n    if (!createdTeam) {\n      return {\n        error: 'Failed to create team. Please try again.',\n        email,\n        password\n      };\n    }\n\n    teamId = createdTeam.id;\n    userRole = 'owner';\n\n    await logActivity(teamId, createdUser.id, ActivityType.CREATE_TEAM);\n  }\n\n  const newTeamMember: NewTeamMember = {\n    userId: createdUser.id,\n    teamId: teamId,\n    role: userRole\n  };\n\n  await Promise.all([\n    db.insert(teamMembers).values(newTeamMember),\n    logActivity(teamId, createdUser.id, ActivityType.SIGN_UP),\n    setSession(createdUser)\n  ]);\n\n  const redirectTo = formData.get('redirect') as string | null;\n  if (redirectTo === 'checkout') {\n    const priceId = formData.get('priceId') as string;\n    return createCheckoutSession({ team: createdTeam, priceId });\n  }\n\n  redirect('/dashboard');\n});\n\nexport async function signOut() {\n  const user = (await getUser()) as User;\n  const userWithTeam = await getUserWithTeam(user.id);\n  await logActivity(userWithTeam?.teamId, user.id, ActivityType.SIGN_OUT);\n  (await cookies()).delete('session');\n}\n\nconst updatePasswordSchema = z.object({\n  currentPassword: z.string().min(8).max(100),\n  newPassword: z.string().min(8).max(100),\n  confirmPassword: z.string().min(8).max(100)\n});\n\nexport const updatePassword = validatedActionWithUser(\n  updatePasswordSchema,\n  async (data, _, user) => {\n    const { currentPassword, newPassword, confirmPassword } = data;\n\n    const isPasswordValid = await comparePasswords(\n      currentPassword,\n      user.passwordHash\n    );\n\n    if (!isPasswordValid) {\n      return {\n        currentPassword,\n        newPassword,\n        confirmPassword,\n        error: 'Current password is incorrect.'\n      };\n    }\n\n    if (currentPassword === newPassword) {\n      return {\n        currentPassword,\n        newPassword,\n        confirmPassword,\n        error: 'New password must be different from the current password.'\n      };\n    }\n\n    if (confirmPassword !== newPassword) {\n      return {\n        currentPassword,\n        newPassword,\n        confirmPassword,\n        error: 'New password and confirmation password do not match.'\n      };\n    }\n\n    const newPasswordHash = await hashPassword(newPassword);\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    await Promise.all([\n      db\n        .update(users)\n        .set({ passwordHash: newPasswordHash })\n        .where(eq(users.id, user.id)),\n      logActivity(userWithTeam?.teamId, user.id, ActivityType.UPDATE_PASSWORD)\n    ]);\n\n    return {\n      success: 'Password updated successfully.'\n    };\n  }\n);\n\nconst deleteAccountSchema = z.object({\n  password: z.string().min(8).max(100)\n});\n\nexport const deleteAccount = validatedActionWithUser(\n  deleteAccountSchema,\n  async (data, _, user) => {\n    const { password } = data;\n\n    const isPasswordValid = await comparePasswords(password, user.passwordHash);\n    if (!isPasswordValid) {\n      return {\n        password,\n        error: 'Incorrect password. Account deletion failed.'\n      };\n    }\n\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    await logActivity(\n      userWithTeam?.teamId,\n      user.id,\n      ActivityType.DELETE_ACCOUNT\n    );\n\n    // Soft delete\n    await db\n      .update(users)\n      .set({\n        deletedAt: sql`CURRENT_TIMESTAMP`,\n        email: sql`CONCAT(email, '-', id, '-deleted')` // Ensure email uniqueness\n      })\n      .where(eq(users.id, user.id));\n\n    if (userWithTeam?.teamId) {\n      await db\n        .delete(teamMembers)\n        .where(\n          and(\n            eq(teamMembers.userId, user.id),\n            eq(teamMembers.teamId, userWithTeam.teamId)\n          )\n        );\n    }\n\n    (await cookies()).delete('session');\n    redirect('/sign-in');\n  }\n);\n\nconst updateAccountSchema = z.object({\n  name: z.string().min(1, 'Name is required').max(100),\n  email: z.string().email('Invalid email address')\n});\n\nexport const updateAccount = validatedActionWithUser(\n  updateAccountSchema,\n  async (data, _, user) => {\n    const { name, email } = data;\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    await Promise.all([\n      db.update(users).set({ name, email }).where(eq(users.id, user.id)),\n      logActivity(userWithTeam?.teamId, user.id, ActivityType.UPDATE_ACCOUNT)\n    ]);\n\n    return { name, success: 'Account updated successfully.' };\n  }\n);\n\nconst removeTeamMemberSchema = z.object({\n  memberId: z.number()\n});\n\nexport const removeTeamMember = validatedActionWithUser(\n  removeTeamMemberSchema,\n  async (data, _, user) => {\n    const { memberId } = data;\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    if (!userWithTeam?.teamId) {\n      return { error: 'User is not part of a team' };\n    }\n\n    await db\n      .delete(teamMembers)\n      .where(\n        and(\n          eq(teamMembers.id, memberId),\n          eq(teamMembers.teamId, userWithTeam.teamId)\n        )\n      );\n\n    await logActivity(\n      userWithTeam.teamId,\n      user.id,\n      ActivityType.REMOVE_TEAM_MEMBER\n    );\n\n    return { success: 'Team member removed successfully' };\n  }\n);\n\nconst inviteTeamMemberSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  role: z.enum(['member', 'owner'])\n});\n\nexport const inviteTeamMember = validatedActionWithUser(\n  inviteTeamMemberSchema,\n  async (data, _, user) => {\n    const { email, role } = data;\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    if (!userWithTeam?.teamId) {\n      return { error: 'User is not part of a team' };\n    }\n\n    const existingMember = await db\n      .select()\n      .from(users)\n      .leftJoin(teamMembers, eq(users.id, teamMembers.userId))\n      .where(\n        and(eq(users.email, email), eq(teamMembers.teamId, userWithTeam.teamId))\n      )\n      .limit(1);\n\n    if (existingMember.length > 0) {\n      return { error: 'User is already a member of this team' };\n    }\n\n    // Check if there's an existing invitation\n    const existingInvitation = await db\n      .select()\n      .from(invitations)\n      .where(\n        and(\n          eq(invitations.email, email),\n          eq(invitations.teamId, userWithTeam.teamId),\n          eq(invitations.status, 'pending')\n        )\n      )\n      .limit(1);\n\n    if (existingInvitation.length > 0) {\n      return { error: 'An invitation has already been sent to this email' };\n    }\n\n    // Create a new invitation\n    await db.insert(invitations).values({\n      teamId: userWithTeam.teamId,\n      email,\n      role,\n      invitedBy: user.id,\n      status: 'pending'\n    });\n\n    await logActivity(\n      userWithTeam.teamId,\n      user.id,\n      ActivityType.INVITE_TEAM_MEMBER\n    );\n\n    // TODO: Send invitation email and include ?inviteId={id} to sign-up URL\n    // await sendInvitationEmail(email, userWithTeam.team.name, role)\n\n    return { success: 'Invitation sent successfully' };\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1199, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/.next-internal/server/app/%5Blocale%5D/%28dashboard%29/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {signOut as '00d361fe2a32ab000c6bad7de63914f497b98db6c3'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 1247, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,yNAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,sLAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 1261, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Slot as SlotPrimitive } from \"radix-ui\";;\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\"\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? SlotPrimitive.Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,2OAAA,CAAA,MAAG,AAAD,EACvB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,oUAAA,CAAA,OAAa,CAAC,IAAI,GAAG;IAE5C,qBACE,6XAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf","debugId":null}}]
}