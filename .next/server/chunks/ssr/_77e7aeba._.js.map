{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent\n};\n"],"names":[],"mappings":";;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,6XAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6XAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,8JACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,6XAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,6XAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6XAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,6XAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,6XAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/lib/payments/actions.ts"],"sourcesContent":["'use server';\n\nimport { redirect } from 'next/navigation';\nimport { createCheckoutSession, createCustomerPortalSession } from './stripe';\nimport { withTeam } from '@/lib/auth/middleware';\n\nexport const checkoutAction = withTeam(async (formData, team) => {\n  const priceId = formData.get('priceId') as string;\n  await createCheckoutSession({ team: team, priceId });\n});\n\nexport const customerPortalAction = withTeam(async (_, team) => {\n  const portalSession = await createCustomerPortalSession(team);\n  redirect(portalSession.url);\n});\n"],"names":[],"mappings":";;;;;;IAWa,uBAAA,WAAA,GAAA,CAAA,GAAA,qWAAA,CAAA,wBAAA,EAAA,8CAAA,qWAAA,CAAA,aAAA,EAAA,KAAA,GAAA,qWAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/app/%5Blocale%5D/%28login%29/actions.ts"],"sourcesContent":["'use server';\n\nimport { z } from 'zod';\nimport { and, eq, sql } from 'drizzle-orm';\nimport { db } from '@/lib/db/drizzle';\nimport {\n  User,\n  users,\n  teams,\n  teamMembers,\n  activityLogs,\n  type NewUser,\n  type NewTeam,\n  type NewTeamMember,\n  type NewActivityLog,\n  ActivityType,\n  invitations\n} from '@/lib/db/schema';\nimport { comparePasswords, hashPassword, setSession } from '@/lib/auth/session';\nimport { redirect } from 'next/navigation';\nimport { cookies } from 'next/headers';\nimport { createCheckoutSession } from '@/lib/payments/stripe';\nimport { getUser, getUserWithTeam } from '@/lib/db/queries';\nimport {\n  validatedAction,\n  validatedActionWithUser\n} from '@/lib/auth/middleware';\n\nasync function logActivity(\n  teamId: number | null | undefined,\n  userId: number,\n  type: ActivityType,\n  ipAddress?: string\n) {\n  if (teamId === null || teamId === undefined) {\n    return;\n  }\n  const newActivity: NewActivityLog = {\n    teamId,\n    userId,\n    action: type,\n    ipAddress: ipAddress || ''\n  };\n  await db.insert(activityLogs).values(newActivity);\n}\n\nconst signInSchema = z.object({\n  email: z.string().email().min(3).max(255),\n  password: z.string().min(8).max(100)\n});\n\nexport const signIn = validatedAction(signInSchema, async (data, formData) => {\n  const { email, password } = data;\n\n  const userWithTeam = await db\n    .select({\n      user: users,\n      team: teams\n    })\n    .from(users)\n    .leftJoin(teamMembers, eq(users.id, teamMembers.userId))\n    .leftJoin(teams, eq(teamMembers.teamId, teams.id))\n    .where(eq(users.email, email))\n    .limit(1);\n\n  if (userWithTeam.length === 0) {\n    return {\n      error: 'Invalid email or password. Please try again.',\n      email,\n      password\n    };\n  }\n\n  const { user: foundUser, team: foundTeam } = userWithTeam[0];\n\n  const isPasswordValid = await comparePasswords(\n    password,\n    foundUser.passwordHash\n  );\n\n  if (!isPasswordValid) {\n    return {\n      error: 'Invalid email or password. Please try again.',\n      email,\n      password\n    };\n  }\n\n  await Promise.all([\n    setSession(foundUser),\n    logActivity(foundTeam?.id, foundUser.id, ActivityType.SIGN_IN)\n  ]);\n\n  const redirectTo = formData.get('redirect') as string | null;\n  if (redirectTo === 'checkout') {\n    const priceId = formData.get('priceId') as string;\n    return createCheckoutSession({ team: foundTeam, priceId });\n  }\n\n  redirect('/dashboard');\n});\n\nconst signUpSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n  inviteId: z.string().optional()\n});\n\nexport const signUp = validatedAction(signUpSchema, async (data, formData) => {\n  const { email, password, inviteId } = data;\n\n  const existingUser = await db\n    .select()\n    .from(users)\n    .where(eq(users.email, email))\n    .limit(1);\n\n  if (existingUser.length > 0) {\n    return {\n      error: 'Failed to create user. Please try again.',\n      email,\n      password\n    };\n  }\n\n  const passwordHash = await hashPassword(password);\n\n  const newUser: NewUser = {\n    email,\n    passwordHash,\n    role: 'owner' // Default role, will be overridden if there's an invitation\n  };\n\n  const [createdUser] = await db.insert(users).values(newUser).returning();\n\n  if (!createdUser) {\n    return {\n      error: 'Failed to create user. Please try again.',\n      email,\n      password\n    };\n  }\n\n  let teamId: number;\n  let userRole: string;\n  let createdTeam: typeof teams.$inferSelect | null = null;\n\n  if (inviteId) {\n    // Check if there's a valid invitation\n    const [invitation] = await db\n      .select()\n      .from(invitations)\n      .where(\n        and(\n          eq(invitations.id, parseInt(inviteId)),\n          eq(invitations.email, email),\n          eq(invitations.status, 'pending')\n        )\n      )\n      .limit(1);\n\n    if (invitation) {\n      teamId = invitation.teamId;\n      userRole = invitation.role;\n\n      await db\n        .update(invitations)\n        .set({ status: 'accepted' })\n        .where(eq(invitations.id, invitation.id));\n\n      await logActivity(teamId, createdUser.id, ActivityType.ACCEPT_INVITATION);\n\n      [createdTeam] = await db\n        .select()\n        .from(teams)\n        .where(eq(teams.id, teamId))\n        .limit(1);\n    } else {\n      return { error: 'Invalid or expired invitation.', email, password };\n    }\n  } else {\n    // Create a new team if there's no invitation\n    const newTeam: NewTeam = {\n      name: `${email}'s Team`\n    };\n\n    [createdTeam] = await db.insert(teams).values(newTeam).returning();\n\n    if (!createdTeam) {\n      return {\n        error: 'Failed to create team. Please try again.',\n        email,\n        password\n      };\n    }\n\n    teamId = createdTeam.id;\n    userRole = 'owner';\n\n    await logActivity(teamId, createdUser.id, ActivityType.CREATE_TEAM);\n  }\n\n  const newTeamMember: NewTeamMember = {\n    userId: createdUser.id,\n    teamId: teamId,\n    role: userRole\n  };\n\n  await Promise.all([\n    db.insert(teamMembers).values(newTeamMember),\n    logActivity(teamId, createdUser.id, ActivityType.SIGN_UP),\n    setSession(createdUser)\n  ]);\n\n  const redirectTo = formData.get('redirect') as string | null;\n  if (redirectTo === 'checkout') {\n    const priceId = formData.get('priceId') as string;\n    return createCheckoutSession({ team: createdTeam, priceId });\n  }\n\n  redirect('/dashboard');\n});\n\nexport async function signOut() {\n  const user = (await getUser()) as User;\n  const userWithTeam = await getUserWithTeam(user.id);\n  await logActivity(userWithTeam?.teamId, user.id, ActivityType.SIGN_OUT);\n  (await cookies()).delete('session');\n}\n\nconst updatePasswordSchema = z.object({\n  currentPassword: z.string().min(8).max(100),\n  newPassword: z.string().min(8).max(100),\n  confirmPassword: z.string().min(8).max(100)\n});\n\nexport const updatePassword = validatedActionWithUser(\n  updatePasswordSchema,\n  async (data, _, user) => {\n    const { currentPassword, newPassword, confirmPassword } = data;\n\n    const isPasswordValid = await comparePasswords(\n      currentPassword,\n      user.passwordHash\n    );\n\n    if (!isPasswordValid) {\n      return {\n        currentPassword,\n        newPassword,\n        confirmPassword,\n        error: 'Current password is incorrect.'\n      };\n    }\n\n    if (currentPassword === newPassword) {\n      return {\n        currentPassword,\n        newPassword,\n        confirmPassword,\n        error: 'New password must be different from the current password.'\n      };\n    }\n\n    if (confirmPassword !== newPassword) {\n      return {\n        currentPassword,\n        newPassword,\n        confirmPassword,\n        error: 'New password and confirmation password do not match.'\n      };\n    }\n\n    const newPasswordHash = await hashPassword(newPassword);\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    await Promise.all([\n      db\n        .update(users)\n        .set({ passwordHash: newPasswordHash })\n        .where(eq(users.id, user.id)),\n      logActivity(userWithTeam?.teamId, user.id, ActivityType.UPDATE_PASSWORD)\n    ]);\n\n    return {\n      success: 'Password updated successfully.'\n    };\n  }\n);\n\nconst deleteAccountSchema = z.object({\n  password: z.string().min(8).max(100)\n});\n\nexport const deleteAccount = validatedActionWithUser(\n  deleteAccountSchema,\n  async (data, _, user) => {\n    const { password } = data;\n\n    const isPasswordValid = await comparePasswords(password, user.passwordHash);\n    if (!isPasswordValid) {\n      return {\n        password,\n        error: 'Incorrect password. Account deletion failed.'\n      };\n    }\n\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    await logActivity(\n      userWithTeam?.teamId,\n      user.id,\n      ActivityType.DELETE_ACCOUNT\n    );\n\n    // Soft delete\n    await db\n      .update(users)\n      .set({\n        deletedAt: sql`CURRENT_TIMESTAMP`,\n        email: sql`CONCAT(email, '-', id, '-deleted')` // Ensure email uniqueness\n      })\n      .where(eq(users.id, user.id));\n\n    if (userWithTeam?.teamId) {\n      await db\n        .delete(teamMembers)\n        .where(\n          and(\n            eq(teamMembers.userId, user.id),\n            eq(teamMembers.teamId, userWithTeam.teamId)\n          )\n        );\n    }\n\n    (await cookies()).delete('session');\n    redirect('/sign-in');\n  }\n);\n\nconst updateAccountSchema = z.object({\n  name: z.string().min(1, 'Name is required').max(100),\n  email: z.string().email('Invalid email address')\n});\n\nexport const updateAccount = validatedActionWithUser(\n  updateAccountSchema,\n  async (data, _, user) => {\n    const { name, email } = data;\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    await Promise.all([\n      db.update(users).set({ name, email }).where(eq(users.id, user.id)),\n      logActivity(userWithTeam?.teamId, user.id, ActivityType.UPDATE_ACCOUNT)\n    ]);\n\n    return { name, success: 'Account updated successfully.' };\n  }\n);\n\nconst removeTeamMemberSchema = z.object({\n  memberId: z.number()\n});\n\nexport const removeTeamMember = validatedActionWithUser(\n  removeTeamMemberSchema,\n  async (data, _, user) => {\n    const { memberId } = data;\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    if (!userWithTeam?.teamId) {\n      return { error: 'User is not part of a team' };\n    }\n\n    await db\n      .delete(teamMembers)\n      .where(\n        and(\n          eq(teamMembers.id, memberId),\n          eq(teamMembers.teamId, userWithTeam.teamId)\n        )\n      );\n\n    await logActivity(\n      userWithTeam.teamId,\n      user.id,\n      ActivityType.REMOVE_TEAM_MEMBER\n    );\n\n    return { success: 'Team member removed successfully' };\n  }\n);\n\nconst inviteTeamMemberSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  role: z.enum(['member', 'owner'])\n});\n\nexport const inviteTeamMember = validatedActionWithUser(\n  inviteTeamMemberSchema,\n  async (data, _, user) => {\n    const { email, role } = data;\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    if (!userWithTeam?.teamId) {\n      return { error: 'User is not part of a team' };\n    }\n\n    const existingMember = await db\n      .select()\n      .from(users)\n      .leftJoin(teamMembers, eq(users.id, teamMembers.userId))\n      .where(\n        and(eq(users.email, email), eq(teamMembers.teamId, userWithTeam.teamId))\n      )\n      .limit(1);\n\n    if (existingMember.length > 0) {\n      return { error: 'User is already a member of this team' };\n    }\n\n    // Check if there's an existing invitation\n    const existingInvitation = await db\n      .select()\n      .from(invitations)\n      .where(\n        and(\n          eq(invitations.email, email),\n          eq(invitations.teamId, userWithTeam.teamId),\n          eq(invitations.status, 'pending')\n        )\n      )\n      .limit(1);\n\n    if (existingInvitation.length > 0) {\n      return { error: 'An invitation has already been sent to this email' };\n    }\n\n    // Create a new invitation\n    await db.insert(invitations).values({\n      teamId: userWithTeam.teamId,\n      email,\n      role,\n      invitedBy: user.id,\n      status: 'pending'\n    });\n\n    await logActivity(\n      userWithTeam.teamId,\n      user.id,\n      ActivityType.INVITE_TEAM_MEMBER\n    );\n\n    // TODO: Send invitation email and include ?inviteId={id} to sign-up URL\n    // await sendInvitationEmail(email, userWithTeam.team.name, role)\n\n    return { success: 'Invitation sent successfully' };\n  }\n);\n"],"names":[],"mappings":";;;;;;IA4Wa,mBAAA,WAAA,GAAA,CAAA,GAAA,qWAAA,CAAA,wBAAA,EAAA,8CAAA,qWAAA,CAAA,aAAA,EAAA,KAAA,GAAA,qWAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/app/%5Blocale%5D/%28login%29/actions.ts"],"sourcesContent":["'use server';\n\nimport { z } from 'zod';\nimport { and, eq, sql } from 'drizzle-orm';\nimport { db } from '@/lib/db/drizzle';\nimport {\n  User,\n  users,\n  teams,\n  teamMembers,\n  activityLogs,\n  type NewUser,\n  type NewTeam,\n  type NewTeamMember,\n  type NewActivityLog,\n  ActivityType,\n  invitations\n} from '@/lib/db/schema';\nimport { comparePasswords, hashPassword, setSession } from '@/lib/auth/session';\nimport { redirect } from 'next/navigation';\nimport { cookies } from 'next/headers';\nimport { createCheckoutSession } from '@/lib/payments/stripe';\nimport { getUser, getUserWithTeam } from '@/lib/db/queries';\nimport {\n  validatedAction,\n  validatedActionWithUser\n} from '@/lib/auth/middleware';\n\nasync function logActivity(\n  teamId: number | null | undefined,\n  userId: number,\n  type: ActivityType,\n  ipAddress?: string\n) {\n  if (teamId === null || teamId === undefined) {\n    return;\n  }\n  const newActivity: NewActivityLog = {\n    teamId,\n    userId,\n    action: type,\n    ipAddress: ipAddress || ''\n  };\n  await db.insert(activityLogs).values(newActivity);\n}\n\nconst signInSchema = z.object({\n  email: z.string().email().min(3).max(255),\n  password: z.string().min(8).max(100)\n});\n\nexport const signIn = validatedAction(signInSchema, async (data, formData) => {\n  const { email, password } = data;\n\n  const userWithTeam = await db\n    .select({\n      user: users,\n      team: teams\n    })\n    .from(users)\n    .leftJoin(teamMembers, eq(users.id, teamMembers.userId))\n    .leftJoin(teams, eq(teamMembers.teamId, teams.id))\n    .where(eq(users.email, email))\n    .limit(1);\n\n  if (userWithTeam.length === 0) {\n    return {\n      error: 'Invalid email or password. Please try again.',\n      email,\n      password\n    };\n  }\n\n  const { user: foundUser, team: foundTeam } = userWithTeam[0];\n\n  const isPasswordValid = await comparePasswords(\n    password,\n    foundUser.passwordHash\n  );\n\n  if (!isPasswordValid) {\n    return {\n      error: 'Invalid email or password. Please try again.',\n      email,\n      password\n    };\n  }\n\n  await Promise.all([\n    setSession(foundUser),\n    logActivity(foundTeam?.id, foundUser.id, ActivityType.SIGN_IN)\n  ]);\n\n  const redirectTo = formData.get('redirect') as string | null;\n  if (redirectTo === 'checkout') {\n    const priceId = formData.get('priceId') as string;\n    return createCheckoutSession({ team: foundTeam, priceId });\n  }\n\n  redirect('/dashboard');\n});\n\nconst signUpSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(8),\n  inviteId: z.string().optional()\n});\n\nexport const signUp = validatedAction(signUpSchema, async (data, formData) => {\n  const { email, password, inviteId } = data;\n\n  const existingUser = await db\n    .select()\n    .from(users)\n    .where(eq(users.email, email))\n    .limit(1);\n\n  if (existingUser.length > 0) {\n    return {\n      error: 'Failed to create user. Please try again.',\n      email,\n      password\n    };\n  }\n\n  const passwordHash = await hashPassword(password);\n\n  const newUser: NewUser = {\n    email,\n    passwordHash,\n    role: 'owner' // Default role, will be overridden if there's an invitation\n  };\n\n  const [createdUser] = await db.insert(users).values(newUser).returning();\n\n  if (!createdUser) {\n    return {\n      error: 'Failed to create user. Please try again.',\n      email,\n      password\n    };\n  }\n\n  let teamId: number;\n  let userRole: string;\n  let createdTeam: typeof teams.$inferSelect | null = null;\n\n  if (inviteId) {\n    // Check if there's a valid invitation\n    const [invitation] = await db\n      .select()\n      .from(invitations)\n      .where(\n        and(\n          eq(invitations.id, parseInt(inviteId)),\n          eq(invitations.email, email),\n          eq(invitations.status, 'pending')\n        )\n      )\n      .limit(1);\n\n    if (invitation) {\n      teamId = invitation.teamId;\n      userRole = invitation.role;\n\n      await db\n        .update(invitations)\n        .set({ status: 'accepted' })\n        .where(eq(invitations.id, invitation.id));\n\n      await logActivity(teamId, createdUser.id, ActivityType.ACCEPT_INVITATION);\n\n      [createdTeam] = await db\n        .select()\n        .from(teams)\n        .where(eq(teams.id, teamId))\n        .limit(1);\n    } else {\n      return { error: 'Invalid or expired invitation.', email, password };\n    }\n  } else {\n    // Create a new team if there's no invitation\n    const newTeam: NewTeam = {\n      name: `${email}'s Team`\n    };\n\n    [createdTeam] = await db.insert(teams).values(newTeam).returning();\n\n    if (!createdTeam) {\n      return {\n        error: 'Failed to create team. Please try again.',\n        email,\n        password\n      };\n    }\n\n    teamId = createdTeam.id;\n    userRole = 'owner';\n\n    await logActivity(teamId, createdUser.id, ActivityType.CREATE_TEAM);\n  }\n\n  const newTeamMember: NewTeamMember = {\n    userId: createdUser.id,\n    teamId: teamId,\n    role: userRole\n  };\n\n  await Promise.all([\n    db.insert(teamMembers).values(newTeamMember),\n    logActivity(teamId, createdUser.id, ActivityType.SIGN_UP),\n    setSession(createdUser)\n  ]);\n\n  const redirectTo = formData.get('redirect') as string | null;\n  if (redirectTo === 'checkout') {\n    const priceId = formData.get('priceId') as string;\n    return createCheckoutSession({ team: createdTeam, priceId });\n  }\n\n  redirect('/dashboard');\n});\n\nexport async function signOut() {\n  const user = (await getUser()) as User;\n  const userWithTeam = await getUserWithTeam(user.id);\n  await logActivity(userWithTeam?.teamId, user.id, ActivityType.SIGN_OUT);\n  (await cookies()).delete('session');\n}\n\nconst updatePasswordSchema = z.object({\n  currentPassword: z.string().min(8).max(100),\n  newPassword: z.string().min(8).max(100),\n  confirmPassword: z.string().min(8).max(100)\n});\n\nexport const updatePassword = validatedActionWithUser(\n  updatePasswordSchema,\n  async (data, _, user) => {\n    const { currentPassword, newPassword, confirmPassword } = data;\n\n    const isPasswordValid = await comparePasswords(\n      currentPassword,\n      user.passwordHash\n    );\n\n    if (!isPasswordValid) {\n      return {\n        currentPassword,\n        newPassword,\n        confirmPassword,\n        error: 'Current password is incorrect.'\n      };\n    }\n\n    if (currentPassword === newPassword) {\n      return {\n        currentPassword,\n        newPassword,\n        confirmPassword,\n        error: 'New password must be different from the current password.'\n      };\n    }\n\n    if (confirmPassword !== newPassword) {\n      return {\n        currentPassword,\n        newPassword,\n        confirmPassword,\n        error: 'New password and confirmation password do not match.'\n      };\n    }\n\n    const newPasswordHash = await hashPassword(newPassword);\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    await Promise.all([\n      db\n        .update(users)\n        .set({ passwordHash: newPasswordHash })\n        .where(eq(users.id, user.id)),\n      logActivity(userWithTeam?.teamId, user.id, ActivityType.UPDATE_PASSWORD)\n    ]);\n\n    return {\n      success: 'Password updated successfully.'\n    };\n  }\n);\n\nconst deleteAccountSchema = z.object({\n  password: z.string().min(8).max(100)\n});\n\nexport const deleteAccount = validatedActionWithUser(\n  deleteAccountSchema,\n  async (data, _, user) => {\n    const { password } = data;\n\n    const isPasswordValid = await comparePasswords(password, user.passwordHash);\n    if (!isPasswordValid) {\n      return {\n        password,\n        error: 'Incorrect password. Account deletion failed.'\n      };\n    }\n\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    await logActivity(\n      userWithTeam?.teamId,\n      user.id,\n      ActivityType.DELETE_ACCOUNT\n    );\n\n    // Soft delete\n    await db\n      .update(users)\n      .set({\n        deletedAt: sql`CURRENT_TIMESTAMP`,\n        email: sql`CONCAT(email, '-', id, '-deleted')` // Ensure email uniqueness\n      })\n      .where(eq(users.id, user.id));\n\n    if (userWithTeam?.teamId) {\n      await db\n        .delete(teamMembers)\n        .where(\n          and(\n            eq(teamMembers.userId, user.id),\n            eq(teamMembers.teamId, userWithTeam.teamId)\n          )\n        );\n    }\n\n    (await cookies()).delete('session');\n    redirect('/sign-in');\n  }\n);\n\nconst updateAccountSchema = z.object({\n  name: z.string().min(1, 'Name is required').max(100),\n  email: z.string().email('Invalid email address')\n});\n\nexport const updateAccount = validatedActionWithUser(\n  updateAccountSchema,\n  async (data, _, user) => {\n    const { name, email } = data;\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    await Promise.all([\n      db.update(users).set({ name, email }).where(eq(users.id, user.id)),\n      logActivity(userWithTeam?.teamId, user.id, ActivityType.UPDATE_ACCOUNT)\n    ]);\n\n    return { name, success: 'Account updated successfully.' };\n  }\n);\n\nconst removeTeamMemberSchema = z.object({\n  memberId: z.number()\n});\n\nexport const removeTeamMember = validatedActionWithUser(\n  removeTeamMemberSchema,\n  async (data, _, user) => {\n    const { memberId } = data;\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    if (!userWithTeam?.teamId) {\n      return { error: 'User is not part of a team' };\n    }\n\n    await db\n      .delete(teamMembers)\n      .where(\n        and(\n          eq(teamMembers.id, memberId),\n          eq(teamMembers.teamId, userWithTeam.teamId)\n        )\n      );\n\n    await logActivity(\n      userWithTeam.teamId,\n      user.id,\n      ActivityType.REMOVE_TEAM_MEMBER\n    );\n\n    return { success: 'Team member removed successfully' };\n  }\n);\n\nconst inviteTeamMemberSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  role: z.enum(['member', 'owner'])\n});\n\nexport const inviteTeamMember = validatedActionWithUser(\n  inviteTeamMemberSchema,\n  async (data, _, user) => {\n    const { email, role } = data;\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    if (!userWithTeam?.teamId) {\n      return { error: 'User is not part of a team' };\n    }\n\n    const existingMember = await db\n      .select()\n      .from(users)\n      .leftJoin(teamMembers, eq(users.id, teamMembers.userId))\n      .where(\n        and(eq(users.email, email), eq(teamMembers.teamId, userWithTeam.teamId))\n      )\n      .limit(1);\n\n    if (existingMember.length > 0) {\n      return { error: 'User is already a member of this team' };\n    }\n\n    // Check if there's an existing invitation\n    const existingInvitation = await db\n      .select()\n      .from(invitations)\n      .where(\n        and(\n          eq(invitations.email, email),\n          eq(invitations.teamId, userWithTeam.teamId),\n          eq(invitations.status, 'pending')\n        )\n      )\n      .limit(1);\n\n    if (existingInvitation.length > 0) {\n      return { error: 'An invitation has already been sent to this email' };\n    }\n\n    // Create a new invitation\n    await db.insert(invitations).values({\n      teamId: userWithTeam.teamId,\n      email,\n      role,\n      invitedBy: user.id,\n      status: 'pending'\n    });\n\n    await logActivity(\n      userWithTeam.teamId,\n      user.id,\n      ActivityType.INVITE_TEAM_MEMBER\n    );\n\n    // TODO: Send invitation email and include ?inviteId={id} to sign-up URL\n    // await sendInvitationEmail(email, userWithTeam.team.name, role)\n\n    return { success: 'Invitation sent successfully' };\n  }\n);\n"],"names":[],"mappings":";;;;;;IA8Ya,mBAAA,WAAA,GAAA,CAAA,GAAA,qWAAA,CAAA,wBAAA,EAAA,8CAAA,qWAAA,CAAA,aAAA,EAAA,KAAA,GAAA,qWAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Input };\n"],"names":[],"mappings":";;;;AAEA;;;AAEA,SAAS,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAsC;IACzE,qBACE,6XAAC;QACC,MAAM;QACN,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,mcACA,iFACA,0GACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/components/ui/radio-group.tsx"],"sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\nimport { RadioGroup as RadioGroupPrimitive } from \"radix-ui\";;\nimport { CircleIcon } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction RadioGroup({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {\n  return (\n    <RadioGroupPrimitive.Root\n      data-slot=\"radio-group\"\n      className={cn(\"grid gap-3\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction RadioGroupItem({\n  className,\n  ...props\n}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {\n  return (\n    <RadioGroupPrimitive.Item\n      data-slot=\"radio-group-item\"\n      className={cn(\n        \"border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator\n        data-slot=\"radio-group-indicator\"\n        className=\"relative flex items-center justify-center\"\n      >\n        <CircleIcon className=\"fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  );\n}\n\nexport { RadioGroup, RadioGroupItem };\n"],"names":[],"mappings":";;;;;AAGA;AACA;AAEA;AANA;;;;;AAQA,SAAS,WAAW,EAClB,SAAS,EACT,GAAG,OACmD;IACtD,qBACE,6XAAC,oaAAA,CAAA,aAAmB,CAAC,IAAI;QACvB,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EAAE,cAAc;QAC3B,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,eAAe,EACtB,SAAS,EACT,GAAG,OACmD;IACtD,qBACE,6XAAC,oaAAA,CAAA,aAAmB,CAAC,IAAI;QACvB,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,0XACA;QAED,GAAG,KAAK;kBAET,cAAA,6XAAC,oaAAA,CAAA,aAAmB,CAAC,SAAS;YAC5B,aAAU;YACV,WAAU;sBAEV,cAAA,6XAAC,8RAAA,CAAA,aAAU;gBAAC,WAAU;;;;;;;;;;;;;;;;AAI9B","debugId":null}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/components/ui/label.tsx"],"sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\nimport { Label as LabelPrimitive } from \"radix-ui\";;\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Label };\n"],"names":[],"mappings":";;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,MAAM,EACb,SAAS,EACT,GAAG,OAC8C;IACjD,qBACE,6XAAC,sZAAA,CAAA,QAAc,CAAC,IAAI;QAClB,aAAU;QACV,WAAW,CAAA,GAAA,4GAAA,CAAA,KAAE,AAAD,EACV,uNACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":["file:///media/franciosse/Data/Repos/piscine_organique/app/%5Blocale%5D/%28dashboard%29/dashboard/page.tsx"],"sourcesContent":["'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardFooter\n} from '@/components/ui/card';\nimport { customerPortalAction } from '@/lib/payments/actions';\nimport { useActionState } from 'react';\nimport { TeamDataWithMembers, User } from '@/lib/db/schema';\nimport { removeTeamMember, inviteTeamMember } from '@/app/[locale]/(login)/actions';\nimport useSWR from 'swr';\nimport { Suspense } from 'react';\nimport { Input } from '@/components/ui/input';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { Loader2, PlusCircle } from 'lucide-react';\n\ntype ActionState = {\n  error?: string;\n  success?: string;\n};\n\nconst fetcher = (url: string) => fetch(url).then((res) => res.json());\n\nfunction SubscriptionSkeleton() {\n  return (\n    <Card className=\"mb-8 h-[140px]\">\n      <CardHeader>\n        <CardTitle>Team Subscription</CardTitle>\n      </CardHeader>\n    </Card>\n  );\n}\n\nfunction ManageSubscription() {\n  const { data: teamData } = useSWR<TeamDataWithMembers>('/api/team', fetcher);\n\n  return (\n    <Card className=\"mb-8\">\n      <CardHeader>\n        <CardTitle>Team Subscription</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center\">\n            <div className=\"mb-4 sm:mb-0\">\n              <p className=\"font-medium\">\n                Current Plan: {teamData?.planName || 'Free'}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">\n                {teamData?.subscriptionStatus === 'active'\n                  ? 'Billed monthly'\n                  : teamData?.subscriptionStatus === 'trialing'\n                  ? 'Trial period'\n                  : 'No active subscription'}\n              </p>\n            </div>\n            <form action={customerPortalAction}>\n              <Button type=\"submit\" variant=\"outline\">\n                Manage Subscription\n              </Button>\n            </form>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction TeamMembersSkeleton() {\n  return (\n    <Card className=\"mb-8 h-[140px]\">\n      <CardHeader>\n        <CardTitle>Team Members</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"animate-pulse space-y-4 mt-1\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"size-8 rounded-full bg-gray-200\"></div>\n            <div className=\"space-y-2\">\n              <div className=\"h-4 w-32 bg-gray-200 rounded\"></div>\n              <div className=\"h-3 w-14 bg-gray-200 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction TeamMembers() {\n  const { data: teamData } = useSWR<TeamDataWithMembers>('/api/team', fetcher);\n  const [removeState, removeAction, isRemovePending] = useActionState<\n    ActionState,\n    FormData\n  >(removeTeamMember, {});\n\n  const getUserDisplayName = (user: Pick<User, 'id' | 'name' | 'email'>) => {\n    return user.name || user.email || 'Unknown User';\n  };\n\n  if (!teamData?.teamMembers?.length) {\n    return (\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <CardTitle>Team Members</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">No team members yet.</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"mb-8\">\n      <CardHeader>\n        <CardTitle>Team Members</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <ul className=\"space-y-4\">\n          {teamData.teamMembers.map((member, index) => (\n            <li key={member.id} className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Avatar>\n                  {/* \n                    This app doesn't save profile images, but here\n                    is how you'd show them:\n\n                    <AvatarImage\n                      src={member.user.image || ''}\n                      alt={getUserDisplayName(member.user)}\n                    />\n                  */}\n                  <AvatarFallback>\n                    {getUserDisplayName(member.user)\n                      .split(' ')\n                      .map((n) => n[0])\n                      .join('')}\n                  </AvatarFallback>\n                </Avatar>\n                <div>\n                  <p className=\"font-medium\">\n                    {getUserDisplayName(member.user)}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground capitalize\">\n                    {member.role}\n                  </p>\n                </div>\n              </div>\n              {index > 1 ? (\n                <form action={removeAction}>\n                  <input type=\"hidden\" name=\"memberId\" value={member.id} />\n                  <Button\n                    type=\"submit\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    disabled={isRemovePending}\n                  >\n                    {isRemovePending ? 'Removing...' : 'Remove'}\n                  </Button>\n                </form>\n              ) : null}\n            </li>\n          ))}\n        </ul>\n        {removeState?.error && (\n          <p className=\"text-red-500 mt-4\">{removeState.error}</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction InviteTeamMemberSkeleton() {\n  return (\n    <Card className=\"h-[260px]\">\n      <CardHeader>\n        <CardTitle>Invite Team Member</CardTitle>\n      </CardHeader>\n    </Card>\n  );\n}\n\nfunction InviteTeamMember() {\n  const { data: user } = useSWR<User>('/api/user', fetcher);\n  const isOwner = user?.role === 'owner';\n  const [inviteState, inviteAction, isInvitePending] = useActionState<\n    ActionState,\n    FormData\n  >(inviteTeamMember, {});\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Invite Team Member</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <form action={inviteAction} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"email\" className=\"mb-2\">\n              Email\n            </Label>\n            <Input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Enter email\"\n              required\n              disabled={!isOwner}\n            />\n          </div>\n          <div>\n            <Label>Role</Label>\n            <RadioGroup\n              defaultValue=\"member\"\n              name=\"role\"\n              className=\"flex space-x-4\"\n              disabled={!isOwner}\n            >\n              <div className=\"flex items-center space-x-2 mt-2\">\n                <RadioGroupItem value=\"member\" id=\"member\" />\n                <Label htmlFor=\"member\">Member</Label>\n              </div>\n              <div className=\"flex items-center space-x-2 mt-2\">\n                <RadioGroupItem value=\"owner\" id=\"owner\" />\n                <Label htmlFor=\"owner\">Owner</Label>\n              </div>\n            </RadioGroup>\n          </div>\n          {inviteState?.error && (\n            <p className=\"text-red-500\">{inviteState.error}</p>\n          )}\n          {inviteState?.success && (\n            <p className=\"text-green-500\">{inviteState.success}</p>\n          )}\n          <Button\n            type=\"submit\"\n            className=\"bg-orange-500 hover:bg-orange-600 text-white\"\n            disabled={isInvitePending || !isOwner}\n          >\n            {isInvitePending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Inviting...\n              </>\n            ) : (\n              <>\n                <PlusCircle className=\"mr-2 h-4 w-4\" />\n                Invite Member\n              </>\n            )}\n          </Button>\n        </form>\n      </CardContent>\n      {!isOwner && (\n        <CardFooter>\n          <p className=\"text-sm text-muted-foreground\">\n            You must be a team owner to invite new members.\n          </p>\n        </CardFooter>\n      )}\n    </Card>\n  );\n}\n\nexport default function SettingsPage() {\n  return (\n    <section className=\"flex-1 p-4 lg:p-8\">\n      <h1 className=\"text-lg lg:text-2xl font-medium mb-6\">Team Settings</h1>\n      <Suspense fallback={<SubscriptionSkeleton />}>\n        <ManageSubscription />\n      </Suspense>\n      <Suspense fallback={<TeamMembersSkeleton />}>\n        <TeamMembers />\n      </Suspense>\n      <Suspense fallback={<InviteTeamMemberSkeleton />}>\n        <InviteTeamMember />\n      </Suspense>\n    </section>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}